import os
import json
import asyncio
import queue
import threading
import traceback
from datetime import datetime, timedelta
from flask import Flask, request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import google.generativeai as genai

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_KEY = os.getenv("GEMINI_KEY")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "https://rozysk-avto-bot.onrender.com") + "/webhook"

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π
print(f"üîç TELEGRAM_TOKEN: {'OK' if TELEGRAM_TOKEN else 'MISSING'}")
print(f"üîç GEMINI_KEY: {'OK (' + str(len(GEMINI_KEY)) + ' chars)' if GEMINI_KEY else 'MISSING'}")
print(f"üîç WEBHOOK_URL: {WEBHOOK_URL}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_KEY)
model = genai.GenerativeModel('gemini-2.5-flash')

app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á —Å –∏—Å—Ç–æ—Ä–∏–µ–π
user_tasks = {}
user_history = {}
update_queue = queue.Queue()
application = None
bot_loop = None
timer_tasks = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üì• /start command from user {update.effective_user.id}")
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á—É, —è —Ä–∞–∑–æ–±—å—é –µ—ë –Ω–∞ –∞–±—Å—É—Ä–¥–Ω–æ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –ø–æ 5-10 –º–∏–Ω—É—Ç.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø—Ä–æ AI' –∏–ª–∏ '—Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç—É'\n\n"
        "üìä /history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–¥–∞—á"
    )

async def handle_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = update.message.text
    print(f"üì• Task received from user {user_id}: {task_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('editing_steps') and user_id in user_tasks:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤
        steps = [line.strip() for line in task_text.split('\n') if line.strip().startswith('–®–∞–≥')]

        if steps:
            user_tasks[user_id]['steps'] = steps
            steps_list = '\n'.join(steps)
            keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_steps")]]
            await update.message.reply_text(
                f"‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n{steps_list}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data['editing_steps'] = False
            return
        else:
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —à–∞–≥–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –®–∞–≥ 1 (5 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ")
            return

    await update.message.reply_text("‚è≥ –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")

    prompt = f"""–î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –Ω–∞ —à–∞–≥–∏. –ö–∞–∂–¥—ã–π —à–∞–≥ - –ê–ë–°–£–†–î–ù–û –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ 5-10 –º–∏–Ω—É—Ç.
–ü—Ä–∏–º–µ—Ä—ã —à–∞–≥–æ–≤: "–æ—Ç–∫—Ä–æ–π –Ω–æ—É—Ç–±—É–∫", "—Å–æ–∑–¥–∞–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª", "–Ω–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫".

–ó–∞–¥–∞—á–∞: {task_text}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ):
–®–∞–≥ 1 (5 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ
–®–∞–≥ 2 (7 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ
...

–ú–∞–∫—Å–∏–º—É–º 8 —à–∞–≥–æ–≤."""

    try:
        print(f"ü§ñ Sending request to Gemini API...")
        response = model.generate_content(prompt)
        print(f"‚úÖ Gemini API response received")

        steps_text = response.text
        print(f"üìù Response text: {steps_text[:200]}...")

        steps = [line.strip() for line in steps_text.split('\n') if line.strip().startswith('–®–∞–≥')]
        print(f"üìã Parsed {len(steps)} steps")

        if not steps:
            print(f"‚ö†Ô∏è No steps parsed from response")
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —à–∞–≥–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.")
            return

        user_tasks[user_id] = {
            'steps': steps, 
            'current': 0, 
            'task_name': task_text,
            'started_at': None,
            'completed': False
        }

        steps_list = '\n'.join(steps)
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_steps")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="edit_steps")]
        ]

        await update.message.reply_text(
            f"üìã –ó–∞–¥–∞—á–∞: {task_text}\n\n{steps_list}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        print(f"‚úÖ Steps sent to user {user_id}")

    except Exception as e:
        print(f"‚ùå ERROR in handle_task: {type(e).__name__}: {str(e)}")
        traceback.print_exc()
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}")

async def edit_steps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if user_id not in user_tasks:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
        return

    steps = user_tasks[user_id]['steps']
    steps_list = '\n'.join(steps)

    keyboard = [[InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å", callback_data="start_steps")]]

    await query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤:\n\n{steps_list}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–®–∞–≥ 1 (5 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "–®–∞–≥ 2 (7 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    context.user_data['editing_steps'] = True

async def start_steps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    print(f"‚ñ∂Ô∏è User {user_id} started steps")

    if user_id not in user_tasks:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
        return

    user_tasks[user_id]['started_at'] = datetime.now()
    context.user_data['editing_steps'] = False

    await send_current_step(query, user_id, context)

async def send_current_step(query, user_id, context):
    task_data = user_tasks[user_id]
    current = task_data['current']
    steps = task_data['steps']

    if current >= len(steps):
        print(f"üéâ User {user_id} completed all steps")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in user_history:
            user_history[user_id] = []

        task_data['completed'] = True
        task_data['completed_at'] = datetime.now()
        user_history[user_id].append(task_data.copy())

        keyboard = [
            [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", callback_data="show_history")],
            [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]
        ]

        await query.edit_message_text(
            "üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        del user_tasks[user_id]
        return

    step = steps[current]
    minutes = 5

    if '–º–∏–Ω' in step:
        try:
            minutes = int(step.split('(')[1].split('–º–∏–Ω')[0].strip())
        except:
            pass

    print(f"üì§ Sending step {current + 1}/{len(steps)} to user {user_id}, timer: {minutes} min")

    keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step")]]

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    end_time = datetime.now() + timedelta(minutes=minutes)
    task_data['current_step_end_time'] = end_time

    await query.edit_message_text(
        f"–®–∞–≥ {current + 1}/{len(steps)}:\n\n{step}\n\n‚è± –¢–∞–π–º–µ—Ä: {minutes} –º–∏–Ω",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    timer_tasks[user_id] = asyncio.create_task(
        update_timer(query, user_id, minutes, current, context)
    )

async def update_timer(query, user_id, total_minutes, step_num, context):
    # –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    try:
        for remaining in range(total_minutes - 1, -1, -1):
            await asyncio.sleep(60)

            if user_id not in user_tasks or user_tasks[user_id]['current'] != step_num:
                return

            task_data = user_tasks[user_id]
            steps = task_data['steps']
            step = steps[step_num]

            keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step")]]

            try:
                await query.message.edit_text(
                    f"–®–∞–≥ {step_num + 1}/{len(steps)}:\n\n{step}\n\n"
                    f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {remaining} –º–∏–Ω",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Could not update timer: {e}")

        # –í—Ä–µ–º—è –≤—ã—à–ª–æ
        if user_id in user_tasks and user_tasks[user_id]['current'] == step_num:
            keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step")]]
            await query.message.reply_text(
                "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ì–æ—Ç–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    except asyncio.CancelledError:
        print(f"‚è± Timer cancelled for user {user_id}")
    except Exception as e:
        print(f"‚ùå Error in timer: {e}")

async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    print(f"‚û°Ô∏è User {user_id} clicked next step")

    if user_id not in user_tasks:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    user_tasks[user_id]['current'] += 1
    await send_current_step(query, user_id, context)

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if user_id not in user_history or not user_history[user_id]:
        await query.edit_message_text(
            "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]])
        )
        return

    history = user_history[user_id]
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"

    for i, task in enumerate(history[-5:], 1):
        task_name = task['task_name']
        steps_count = len(task['steps'])
        completed_at = task.get('completed_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        if isinstance(completed_at, datetime):
            completed_at = completed_at.strftime('%d.%m.%Y %H:%M')

        history_text += f"{i}. {task_name}\n   –®–∞–≥–æ–≤: {steps_count} | {completed_at}\n\n"

    keyboard = [[InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]]

    await query.edit_message_text(history_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —è —Ä–∞–∑–æ–±—å—é –µ—ë –Ω–∞ –∞–±—Å—É—Ä–¥–Ω–æ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –ø–æ 5-10 –º–∏–Ω—É—Ç."
    )

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_history or not user_history[user_id]:
        keyboard = [[InlineKeyboardButton("‚ûï –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await update.message.reply_text(
            "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    history = user_history[user_id]
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"

    for i, task in enumerate(history[-10:], 1):
        task_name = task['task_name']
        steps_count = len(task['steps'])
        completed_at = task.get('completed_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        if isinstance(completed_at, datetime):
            completed_at = completed_at.strftime('%d.%m.%Y %H:%M')

        history_text += f"{i}. {task_name}\n   –®–∞–≥–æ–≤: {steps_count} | {completed_at}\n\n"

    keyboard = [[InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]]

    await update.message.reply_text(history_text, reply_markup=InlineKeyboardMarkup(keyboard))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
async def setup_application():
    global application
    print("üîß Setting up Telegram application...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task))
    application.add_handler(CallbackQueryHandler(start_steps, pattern="^start_steps$"))
    application.add_handler(CallbackQueryHandler(edit_steps, pattern="^edit_steps$"))
    application.add_handler(CallbackQueryHandler(next_step, pattern="^next_step$"))
    application.add_handler(CallbackQueryHandler(show_history, pattern="^show_history$"))
    application.add_handler(CallbackQueryHandler(new_task, pattern="^new_task$"))

    await application.initialize()
    await application.start()
    print("‚úÖ Telegram application initialized")

async def setup_webhook():
    try:
        print("üîß Setting up webhook...")
        bot = Bot(token=TELEGRAM_TOKEN)
        await bot.initialize()
        result = await bot.set_webhook(url=WEBHOOK_URL)
        await bot.shutdown()
        print(f"‚úÖ Webhook set: {WEBHOOK_URL} -> {result}")
    except Exception as e:
        print(f"‚ùå Error setting webhook: {e}")
        traceback.print_exc()

async def process_updates():
    global application, update_queue
    print("üöÄ Starting update processor...")
    while True:
        try:
            try:
                update_data = update_queue.get(timeout=1)
            except queue.Empty:
                continue

            if update_data is None:
                break

            update = Update.de_json(update_data, application.bot)
            await application.process_update(update)
            print(f"‚úÖ Processed update: {update.update_id}")
        except Exception as e:
            print(f"‚ùå Error processing update: {e}")
            traceback.print_exc()

        await asyncio.sleep(0.01)

def run_bot():
    global bot_loop
    try:
        bot_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(bot_loop)
        bot_loop.run_until_complete(setup_application())
        bot_loop.run_until_complete(setup_webhook())
        bot_loop.run_until_complete(process_updates())
    except Exception as e:
        print(f"‚ùå Error in bot thread: {e}")
        traceback.print_exc()
    finally:
        if bot_loop:
            bot_loop.close()

# Flask routes
@app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        if not json_data:
            return "No data", 400

        update_queue.put(json_data)
        print(f"üì® Update queued: {json_data.get('update_id', 'unknown')}")
        return "OK", 200
    except Exception as e:
        print(f"‚ùå Error in webhook: {e}")
        traceback.print_exc()
        return "Error", 500

@app.route('/health')
def health():
    return "OK", 200

if __name__ == '__main__':
    print("üöÄ Starting bot with webhook...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    import time
    time.sleep(3)

    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get('PORT', 10000))
    print(f"üåê Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True, use_reloader=False)
