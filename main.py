import logging
import pandas as pd
import re
import os
import tempfile
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.getenv('BOT_TOKEN')

class FileProcessor:
    @staticmethod
    def smart_clean_address(address):
        if pd.isna(address):
            return address

        address = str(address).strip()

        patterns_to_remove = [
            r',?\s*–∫–≤\.?\s*\d+', r',?\s*–∫–≤–∞—Ä—Ç–∏—Ä–∞\s*\d+',
            r',?\s*–æ—Ñ\.?\s*\d+', r',?\s*–æ—Ñ–∏—Å\s*\d+',
            r',?\s*—ç—Ç\.?\s*\d+', r',?\s*—ç—Ç–∞–∂\s*\d+',
            r',?\s*–ø–æ–º\.?\s*\d+', r',?\s*–ø–æ–º–µ—â–µ–Ω–∏–µ\s*\d+',
            r'^\d{6},?\s*',
        ]

        for pattern in patterns_to_remove:
            address = re.sub(pattern, '', address, flags=re.IGNORECASE)

        address = re.sub(r',+', ',', address)
        address = re.sub(r'\s+', ' ', address)
        address = address.strip(' ,')

        has_city = re.search(r'\b(–ú–æ—Å–∫–≤–∞|–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å|–º–æ—Å–∫–≤–∞|–º–æ|–º\.–æ\.)\b', address, re.IGNORECASE)

        if not has_city:
            mo_indicators = [
                r'\b(–±–∞–ª–∞—à–∏—Ö–∞|–æ–¥–∏–Ω—Ü–æ–≤–æ|–ø–æ–¥–æ–ª—å—Å–∫|–∫–æ—Ä–æ–ª—ë–≤|–º—ã—Ç–∏—â–∏|—Ö–∏–º–∫–∏|–ª—é–±–µ—Ä—Ü—ã|–∫–æ–ª–æ–º–Ω–∞|—ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å|–∫—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫|—Å–µ—Ä–≥–∏–µ–≤ –ø–æ—Å–∞–¥|—â—ë–ª–∫–æ–≤–æ|–æ—Ä–µ—Ö–æ–≤–æ-–∑—É–µ–≤–æ|—Ä–∞–º–µ–Ω—Å–∫–æ–µ|–∂—É–∫–æ–≤—Å–∫–∏–π|–ø—É—à–∫–∏–Ω–æ|–∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π|–¥–æ–º–æ–¥–µ–¥–æ–≤–æ|–≤–∏–¥–Ω–æ–µ|–∏–≤–∞–Ω—Ç–µ–µ–≤–∫–∞|—Å–µ—Ä–≥–∏–µ–≤-–ø–æ—Å–∞–¥|—Ñ—Ä—è–∑–∏–Ω–æ|–ª–æ–±–Ω—è|–∫–ª–∏–Ω|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫|—Ä–æ—à–∞–ª—å|–∫–∞—à–∏—Ä–∞|—á–µ—Ö–æ–≤|–¥–º–∏—Ç—Ä–æ–≤|–Ω–æ–≥–∏–Ω—Å–∫|–ø–∞–≤–ª–æ–≤—Å–∫–∏–π –ø–æ—Å–∞–¥|—Ç–∞–ª–¥–æ–º|—è—Ö—Ä–æ–º–∞|–∫—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫|–±–æ–≥–æ—Ä–æ–¥—Å–∫|–∫—Ä–∞—Å–Ω–æ–∑–∞–≤–æ–¥—Å–∫|–∑–∞–≥–æ—Ä—Å–∫|—Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ—Ä—Å–∫|–∏—Å—Ç—Ä–∞)\b',
                r'\b–≥\.?\s*(–±–∞–ª–∞—à–∏—Ö–∞|–æ–¥–∏–Ω—Ü–æ–≤–æ|–ø–æ–¥–æ–ª—å—Å–∫)',
                r'\b(–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª|–º–æ)\b'
            ]

            is_mo = any(re.search(pattern, address, re.IGNORECASE) for pattern in mo_indicators)

            if is_mo:
                address += ', –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–æ—Å—Å–∏—è'
            else:
                address += ', –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'

        return address

    @staticmethod
    def extract_license_plate(text):
        if pd.isna(text) or not isinstance(text, str):
            return ""

        patterns = [
            r'[–ê-–Ø]\d{3}[–ê-–Ø]{2}\d{2,3}',
            r'\d{4}[–ê-–Ø]{2}\d{2,3}',
            r'[–ê-–Ø]{1,2}\d{3,4}[–ê-–Ø]{1,2}\d{2,3}'
        ]

        found_plates = []
        for pattern in patterns:
            matches = re.findall(pattern, text.upper())
            found_plates.extend(matches)

        if found_plates:
            return found_plates[0]

        text_clean = text.replace(' ', '').replace(',', ' ').split()[-1]

        if len(text_clean) >= 8:
            last_3 = text_clean[-3:]

            if (len(last_3) == 3 and
                last_3[0].isdigit() and
                last_3[1].isdigit() and
                last_3[2].isalpha()):
                return text_clean[-8:] if len(text_clean) >= 8 else text_clean

            elif (len(last_3) == 3 and
                  last_3[0].isdigit() and
                  last_3[1].isdigit() and
                  last_3[2].isdigit()):
                return text_clean[-9:] if len(text_clean) >= 9 else text_clean

        return ""

    @staticmethod
    def remove_license_plate(text, plate):
        if pd.isna(text) or not isinstance(text, str) or not plate:
            return text
        return text.replace(plate, '').strip()

    @staticmethod
    def process_file(file_path):
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            if file_path.endswith('.csv'):
                df = pd.read_csv(file_path, encoding='utf-8')
            elif file_path.endswith(('.xlsx', '.xls')):
                df = pd.read_excel(file_path)
            else:
                return None, "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ Excel —Ñ–∞–π–ª—ã!"

            # –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
            address_cols = [col for col in df.columns if any(word in col.lower()
                              for word in ['–∞–¥—Ä–µ—Å', 'address'])]

            if address_cols:
                address_col = address_cols[0]
                df[address_col] = df[address_col].apply(FileProcessor.smart_clean_address)

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
            auto_data_col = "–î–ê–ù–ù–´–ï –ê–í–¢–û"
            if auto_data_col in df.columns:
                auto_data_index = df.columns.get_loc(auto_data_col)
                license_plates = df[auto_data_col].apply(FileProcessor.extract_license_plate)
                df.insert(auto_data_index + 1, "–ù–û–ú–ï–†–ù–û–ô –ó–ù–ê–ö", license_plates)

                for i in range(len(df)):
                    original_text = df.loc[i, auto_data_col]
                    plate = df.loc[i, "–ù–û–ú–ï–†–ù–û–ô –ó–ù–ê–ö"]
                    if plate:
                        df.loc[i, auto_data_col] = FileProcessor.remove_license_plate(original_text, plate)

            return df, None

        except Exception as e:
            return None, f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöó –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Ä–æ–∑—ã—Å–∫–∞ –∞–≤—Ç–æ!\n\n"
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª Excel (.xlsx, .xls) –∏–ª–∏ CSV (.csv) –∏ —è:\n"
        "‚úÖ –û—á–∏—â—É –∞–¥—Ä–µ—Å–∞\n"
        "‚úÖ –ò–∑–≤–ª–µ–∫—É –Ω–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏\n"
        "‚úÖ –†–∞–∑–¥–µ–ª—é –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2000 —Å—Ç—Ä–æ–∫\n"
        "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—é –≥–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Google My Maps\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel –∏–ª–∏ CSV\n"
        "2Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞\n"
        "4Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –≤ Google My Maps\n\n"
        "‚ùì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls, .csv"
    )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.document:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª!")
        return

    file = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if not any(file.file_name.lower().endswith(ext) for ext in ['.xlsx', '.xls', '.csv']):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx, .xls) –∏ CSV (.csv)")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    processing_message = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_obj = await context.bot.get_file(file.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –ü—É—Ç—å –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            input_file_path = os.path.join(temp_dir, file.file_name)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            await file_obj.download_to_drive(input_file_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            df, error = FileProcessor.process_file(input_file_path)
            
            if error:
                await processing_message.edit_text(error)
                return
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            total_rows = len(df)
            chunk_size = 2000
            num_parts = (total_rows + chunk_size - 1) // chunk_size
            
            await processing_message.edit_text(
                f"üìä –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
                f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_rows}\n"
                f"–ß–∞—Å—Ç–µ–π: {num_parts}\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            instruction_message = (
                f"üìÅ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤ Google My Maps.\n\n"
                f"üí° –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ."
            )
            await update.message.reply_text(instruction_message)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            for i in range(0, total_rows, chunk_size):
                part_num = (i // chunk_size) + 1
                chunk = df[i:i + chunk_size]
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —á–∞—Å—Ç–∏
                part_filename = f"{part_num} —á–∞—Å—Ç—å —Ä–æ–∑—ã—Å–∫–∞ –∞–≤—Ç–æ.csv"
                part_file_path = os.path.join(temp_dir, part_filename)
                chunk.to_csv(part_file_path, index=False, encoding='utf-8')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(part_file_path, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=f,
                        filename=part_filename,
                        caption=f"üìÑ –ß–∞—Å—Ç—å {part_num} –∏–∑ {num_parts}"
                    )
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(1)
            
            await update.message.reply_text("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –≤ Google My Maps.")
            
    except Exception as e:
        logger.error(f"Error processing file: {e}")
        await processing_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
