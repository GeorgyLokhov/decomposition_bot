const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const XLSX = require('xlsx');

const app = express();
const port = process.env.PORT || 10000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const APPS_SCRIPT_URL = process.env.APPS_SCRIPT_URL;
const WEBHOOK_URL = process.env.WEBHOOK_URL || `https://rozysk-avto-bot.onrender.com/webhook/${BOT_TOKEN}`;

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó polling –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const bot = new TelegramBot(BOT_TOKEN, { 
  polling: false,
  request: {
    agentOptions: {
      keepAlive: true,
      family: 4
    }
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
const userFileData = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const STATES = {
  IDLE: 'idle',
  WAITING_FILTER_CHOICE: 'waiting_filter_choice',
  SELECTING_ADDRESS_TYPE: 'selecting_address_type',
  SELECTING_CAR_TYPE: 'selecting_car_type',
  READY_TO_PROCESS: 'ready_to_process'
};

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
async function setupWebhook() {
  try {
    await bot.setWebHook(WEBHOOK_URL);
    console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', WEBHOOK_URL);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserState(userId) {
  if (!userStates.has(userId)) {
    userStates.set(userId, {
      state: STATES.IDLE,
      selectedAddressTypes: new Set(),
      selectedCarTypes: new Set(),
      availableAddressTypes: [],
      availableCarTypes: [],
      fileName: '',
      csvContent: ''
    });
  }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
function getFileType(filename) {
  const ext = filename.toLowerCase().split('.').pop();
  return ext;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
function isSupportedFile(filename) {
  const supportedTypes = ['csv', 'xlsx', 'xls'];
  const fileType = getFileType(filename);
  return supportedTypes.includes(fileType);
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Excel –≤ CSV –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function convertExcelToCSV(buffer, fileName) {
  try {
    console.log('Converting Excel to CSV on server...');
    
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const csvContent = XLSX.utils.sheet_to_csv(worksheet);
    
    console.log('Excel converted to CSV successfully, length:', csvContent.length);
    return csvContent;
    
  } catch (error) {
    console.error('Error converting Excel to CSV:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Excel —Ñ–∞–π–ª: ' + error.message);
  }
}

// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ CSV –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
function getUniqueValues(csvContent) {
  try {
    const lines = csvContent.split('\n');
    if (lines.length < 2) return { addressTypes: [], carTypes: [] };
    
    const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
    
    // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    const addressTypeIndex = headers.findIndex(h => 
      h.toLowerCase().includes('—Ç–∏–ø –∞–¥—Ä–µ—Å–∞') || h.toLowerCase().includes('address')
    );
    const carTypeIndex = headers.findIndex(h => 
      h.toLowerCase().includes('—Ñ–ª–∞–≥') || h.toLowerCase().includes('–∞–≤—Ç–æ')
    );
    
    const addressTypes = new Set();
    const carTypes = new Set();
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    for (let i = 1; i < lines.length; i++) {
      if (lines[i].trim() === '') continue;
      
      const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
      
      if (addressTypeIndex !== -1 && values[addressTypeIndex]) {
        addressTypes.add(values[addressTypeIndex]);
      }
      
      if (carTypeIndex !== -1 && values[carTypeIndex]) {
        carTypes.add(values[carTypeIndex]);
      }
    }
    
    return {
      addressTypes: Array.from(addressTypes).filter(Boolean),
      carTypes: Array.from(carTypes).filter(Boolean)
    };
    
  } catch (error) {
    console.error('Error parsing CSV for unique values:', error);
    return { addressTypes: [], carTypes: [] };
  }
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Apps Script
async function processCSVInAppsScript(csvContent, fileName, filters = null) {
  try {
    console.log(`Sending CSV to Apps Script: ${fileName}, length: ${csvContent.length}`);
    
    const base64Content = Buffer.from(csvContent, 'utf8').toString('base64');
    
    const requestData = {
      action: 'process_csv',
      csvContent: base64Content,
      fileName: fileName
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (filters) {
      requestData.filters = filters;
    }
    
    const response = await axios.post(APPS_SCRIPT_URL, requestData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 300000
    });

    console.log('Apps Script response received');
    return response.data;
  } catch (error) {
    console.error('Error processing CSV in Apps Script:', error);
    throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Google Apps Script. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function createFilterKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: '‚úÖ –î–∞, –Ω—É–∂–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'filter_yes' }],
        [{ text: '‚ùå –ù–µ—Ç, –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤', callback_data: 'filter_no' }]
      ]
    }
  };
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
function createAddressTypeKeyboard(availableTypes, selectedTypes) {
  const keyboard = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
  for (let i = 0; i < availableTypes.length; i += 2) {
    const row = [];
    
    for (let j = i; j < Math.min(i + 2, availableTypes.length); j++) {
      const type = availableTypes[j];
      const isSelected = selectedTypes.has(type);
      const text = isSelected ? `‚úÖ ${type}` : `‚¨ú ${type}`;
      
      row.push({
        text: text,
        callback_data: `addr_${j}`
      });
    }
    
    keyboard.push(row);
  }
  
  // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  keyboard.push([
    { text: '‚û°Ô∏è –î–∞–ª–µ–µ –∫ –≤—ã–±–æ—Ä—É –∞–≤—Ç–æ', callback_data: 'addr_next' },
    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'addr_back' }
  ]);
  
  return { reply_markup: { inline_keyboard: keyboard } };
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ
function createCarTypeKeyboard(availableTypes, selectedTypes) {
  const keyboard = [];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
  for (let i = 0; i < availableTypes.length; i += 2) {
    const row = [];
    
    for (let j = i; j < Math.min(i + 2, availableTypes.length); j++) {
      const type = availableTypes[j];
      const isSelected = selectedTypes.has(type);
      const text = isSelected ? `‚úÖ ${type}` : `‚¨ú ${type}`;
      
      row.push({
        text: text,
        callback_data: `car_${j}`
      });
    }
    
    keyboard.push(row);
  }
  
  // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  keyboard.push([
    { text: 'üéØ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'car_apply' },
    { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –∞–¥—Ä–µ—Å–æ–≤', callback_data: 'car_back' }
  ]);
  
  return { reply_markup: { inline_keyboard: keyboard } };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º
async function sendDocumentSafe(chatId, buffer, filename) {
  try {
    console.log(`Sending document: ${filename}, size: ${buffer.length} bytes`);
    
    await bot.sendDocument(chatId, buffer, {
      caption: `üìÑ ${filename}`
    }, {
      filename: filename,
      contentType: 'text/csv'
    });
    
    console.log('Document sent successfully');
    
  } catch (error) {
    console.error('Error sending document:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(chatId) {
  initUserState(chatId);
  userStates.get(chatId).state = STATES.IDLE;
  
  const welcomeMessage = `
üöó **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rozysk Avto Bot v6.0!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Ä–æ–∑—ã—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:

‚úÖ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û—á–∏—â–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ
‚Ä¢ –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω—É (–ú–æ—Å–∫–≤–∞ –∏ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ)
‚Ä¢ –†–∞–∑–¥–µ–ª—è–µ—Ç –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2000 —Å—Ç—Ä–æ–∫

üÜï **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–¥—Ä–µ—Å–∞
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ (—Å—Ç–∞—Ä–æ–µ/–Ω–æ–≤–æ–µ)
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤

üìé **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ CSV (.csv)
‚Ä¢ Excel (.xlsx, .xls)

üì§ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!**
  `;
  
  await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function handleDocument(chatId, document) {
  const fileName = document.file_name;
  const fileSize = document.file_size;

  console.log(`Processing document: ${fileName}, size: ${fileSize} bytes`);
  
  initUserState(chatId);

  try {
    if (!isSupportedFile(fileName)) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: CSV, Excel (.xlsx, .xls)');
      return;
    }

    const processingMsg = await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...');

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    const fileInfo = await bot.getFile(document.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;

    await bot.editMessageText('üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...', {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });

    const response = await axios.get(fileUrl, { 
      responseType: 'arraybuffer',
      timeout: 60000
    });

    const fileBuffer = Buffer.from(response.data);
    const fileType = getFileType(fileName);
    let csvContent;

    if (fileType === 'csv') {
      csvContent = fileBuffer.toString('utf8');
    } else {
      await bot.editMessageText('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é Excel –≤ CSV...', {
        chat_id: chatId,
        message_id: processingMsg.message_id
      });
      
      csvContent = convertExcelToCSV(fileBuffer, fileName);
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await bot.editMessageText('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤...', {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });

    const uniqueValues = getUniqueValues(csvContent);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userState = userStates.get(chatId);
    userState.fileName = fileName;
    userState.csvContent = csvContent;
    userState.availableAddressTypes = uniqueValues.addressTypes;
    userState.availableCarTypes = uniqueValues.carTypes;
    userState.state = STATES.WAITING_FILTER_CHOICE;

    await bot.deleteMessage(chatId, processingMsg.message_id);

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filterMessage = `
üìä **–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!**

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤: ${uniqueValues.addressTypes.length}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ: ${uniqueValues.carTypes.length}

üéõ **–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏?**

*–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–µ—Å—å —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ —Å –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ú–æ—Å–∫–≤–µ –∏ –ü–æ–¥–º–æ—Å–∫–æ–≤—å—é)*
    `;

    await bot.sendMessage(chatId, filterMessage, {
      parse_mode: 'Markdown',
      ...createFilterKeyboard()
    });

  } catch (error) {
    console.error('Error processing document:', error);
    await bot.sendMessage(chatId, `‚ùå ${error.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const messageId = callbackQuery.message.message_id;
  
  initUserState(chatId);
  const userState = userStates.get(chatId);

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    if (data === 'filter_no') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      userState.state = STATES.READY_TO_PROCESS;
      
      await bot.editMessageText('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤...', {
        chat_id: chatId,
        message_id: messageId
      });

      await processAndSendFiles(chatId, userState, null);
      
    } else if (data === 'filter_yes') {
      // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
      userState.state = STATES.SELECTING_ADDRESS_TYPE;
      
      const addressMessage = `
üè† **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**

*–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å–Ω–∏–º–µ—Ç –≥–∞–ª–æ—á–∫—É.*

**–î–æ—Å—Ç—É–ø–Ω–æ —Ç–∏–ø–æ–≤:** ${userState.availableAddressTypes.length}
      `;

      await bot.editMessageText(addressMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...createAddressTypeKeyboard(userState.availableAddressTypes, userState.selectedAddressTypes)
      });
      
    } else if (data.startsWith('addr_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
      if (data === 'addr_back') {
        userState.state = STATES.WAITING_FILTER_CHOICE;
        
        const filterMessage = `
üìä **–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!**

üéõ **–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏?**
        `;

        await bot.editMessageText(filterMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...createFilterKeyboard()
        });
        
      } else if (data === 'addr_next') {
        userState.state = STATES.SELECTING_CAR_TYPE;
        
        const carMessage = `
üöó **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–≤—Ç–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**

*–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å–Ω–∏–º–µ—Ç –≥–∞–ª–æ—á–∫—É.*

**–í—ã–±—Ä–∞–Ω–æ —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤:** ${userState.selectedAddressTypes.size}
**–î–æ—Å—Ç—É–ø–Ω–æ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ:** ${userState.availableCarTypes.length}
        `;

        await bot.editMessageText(carMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...createCarTypeKeyboard(userState.availableCarTypes, userState.selectedCarTypes)
        });
        
      } else {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞
        const index = parseInt(data.replace('addr_', ''));
        const type = userState.availableAddressTypes[index];
        
        if (userState.selectedAddressTypes.has(type)) {
          userState.selectedAddressTypes.delete(type);
        } else {
          userState.selectedAddressTypes.add(type);
        }
        
        const addressMessage = `
üè† **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**

*–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å–Ω–∏–º–µ—Ç –≥–∞–ª–æ—á–∫—É.*

**–í—ã–±—Ä–∞–Ω–æ:** ${userState.selectedAddressTypes.size} –∏–∑ ${userState.availableAddressTypes.length}
        `;

        await bot.editMessageText(addressMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...createAddressTypeKeyboard(userState.availableAddressTypes, userState.selectedAddressTypes)
        });
      }
      
    } else if (data.startsWith('car_')) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ
      if (data === 'car_back') {
        userState.state = STATES.SELECTING_ADDRESS_TYPE;
        
        const addressMessage = `
üè† **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**

*–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å–Ω–∏–º–µ—Ç –≥–∞–ª–æ—á–∫—É.*

**–í—ã–±—Ä–∞–Ω–æ:** ${userState.selectedAddressTypes.size} –∏–∑ ${userState.availableAddressTypes.length}
        `;

        await bot.editMessageText(addressMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...createAddressTypeKeyboard(userState.availableAddressTypes, userState.selectedAddressTypes)
        });
        
      } else if (data === 'car_apply') {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        userState.state = STATES.READY_TO_PROCESS;
        
        const filters = {
          addressTypes: Array.from(userState.selectedAddressTypes),
          carTypes: Array.from(userState.selectedCarTypes)
        };
        
        await bot.editMessageText('üéØ –ü—Ä–∏–º–µ–Ω—è—é –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...', {
          chat_id: chatId,
          message_id: messageId
        });

        await processAndSendFiles(chatId, userState, filters);
        
      } else {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–≤—Ç–æ
        const index = parseInt(data.replace('car_', ''));
        const type = userState.availableCarTypes[index];
        
        if (userState.selectedCarTypes.has(type)) {
          userState.selectedCarTypes.delete(type);
        } else {
          userState.selectedCarTypes.add(type);
        }
        
        const carMessage = `
üöó **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–≤—Ç–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:**

*–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ —Å–Ω–∏–º–µ—Ç –≥–∞–ª–æ—á–∫—É.*

**–í—ã–±—Ä–∞–Ω–æ —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤:** ${userState.selectedAddressTypes.size}
**–í—ã–±—Ä–∞–Ω–æ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ:** ${userState.selectedCarTypes.size} –∏–∑ ${userState.availableCarTypes.length}
        `;

        await bot.editMessageText(carMessage, {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          ...createCarTypeKeyboard(userState.availableCarTypes, userState.selectedCarTypes)
        });
      }
      
    } else if (data === 'reselect_filters') {
      // –ü–µ—Ä–µ–≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤
      userState.selectedAddressTypes.clear();
      userState.selectedCarTypes.clear();
      userState.state = STATES.WAITING_FILTER_CHOICE;
      
      const filterMessage = `
üîÑ **–ü–µ—Ä–µ–≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤**

üéõ **–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏?**
      `;

      await bot.editMessageText(filterMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        ...createFilterKeyboard()
      });
    }

  } catch (error) {
    console.error('Error handling callback query:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
async function processAndSendFiles(chatId, userState, filters) {
  try {
    const result = await processCSVInAppsScript(userState.csvContent, userState.fileName, filters);

    if (result.success) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      let filterInfo = '';
      if (filters) {
        filterInfo = `
üéØ **–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:**
‚Ä¢ –¢–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤: ${filters.addressTypes.length > 0 ? filters.addressTypes.join(', ') : '–í—Å–µ'}
‚Ä¢ –¢–∏–ø—ã –∞–≤—Ç–æ: ${filters.carTypes.length > 0 ? filters.carTypes.join(', ') : '–í—Å–µ'}
        `;
      }

      const resultMessage = `
‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**
${filterInfo}
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${result.totalRows}
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–µ–π: ${result.partsCount}

üìÅ **–û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...**
      `;

      await bot.sendMessage(chatId, resultMessage, { parse_mode: 'Markdown' });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      const instructionMessage = `
üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google My Maps (mymaps.google.com)
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
4. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
5. –ê–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ

üéØ **–ö–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ 2000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏**
      `;

      await bot.sendMessage(chatId, instructionMessage, { parse_mode: 'Markdown' });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
      for (let i = 0; i < result.files.length; i++) {
        const file = result.files[i];
        const buffer = Buffer.from(file.content, 'base64');
        
        await sendDocumentSafe(chatId, buffer, file.name);

        if (i < result.files.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1500));
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const finalMessage = `
üéâ **–í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!**

–ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –≤ Google My Maps –∏–ª–∏ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤.
      `;

      await bot.sendMessage(chatId, finalMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'reselect_filters' }]
          ]
        }
      });

    } else {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}`);
    }

  } catch (error) {
    console.error('Error processing and sending files:', error);
    await bot.sendMessage(chatId, `‚ùå ${error.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(chatId, text) {
  if (text && !text.startsWith('/')) {
    await bot.sendMessage(chatId, 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (CSV –∏–ª–∏ Excel)');
  }
}

// Webhook endpoint
app.post(`/webhook/${BOT_TOKEN}`, async (req, res) => {
  try {
    const update = req.body;
    
    if (update.message) {
      const chatId = update.message.chat.id;
      const message = update.message;

      console.log('Received message from chat:', chatId);

      if (message.text === '/start') {
        await handleStart(chatId);
      } else if (message.document) {
        await handleDocument(chatId, message.document);
      } else if (message.text) {
        await handleMessage(chatId, message.text);
      }
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }

    res.status(200).send('OK');
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(200).send('OK');
  }
});

// –û—Å–Ω–æ–≤–Ω—ã–µ routes
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Rozysk Avto Bot v6.0</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 50px; text-align: center; background: #f0f0f0; }
        .container { max-width: 700px; margin: 0 auto; background: white; padding: 40px; border-radius: 15px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
        .status { color: #4CAF50; font-size: 28px; font-weight: bold; margin-bottom: 20px; }
        .version { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 15px; border-radius: 10px; margin: 20px 0; }
        .features { background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 15px 0; text-align: left; }
        .new-badge { background: #ff6b6b; color: white; padding: 3px 8px; border-radius: 12px; font-size: 12px; margin-left: 10px; }
        .info { color: #666; margin-top: 25px; line-height: 1.8; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üöó Rozysk Avto Bot</h1>
        <div class="status">‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!</div>
        
        <div class="version">
          <h3>üì¶ –í–µ—Ä—Å–∏—è 6.0 <span class="new-badge">NEW</span></h3>
          <p>–°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö</p>
        </div>
        
        <div class="features">
          <h4>üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
          <ul>
            <li>üó∫Ô∏è –ê–≤—Ç–æ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É (–ú–æ—Å–∫–≤–∞ + –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ)</li>
            <li>üè† –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –∞–¥—Ä–µ—Å–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)</li>
            <li>üöó –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ (—Å—Ç–∞—Ä–æ–µ/–Ω–æ–≤–æ–µ)</li>
            <li>‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥–∞–ª–æ—á–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞</li>
            <li>üîÑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</li>
            <li>üîô –ù–∞–≤–∏–≥–∞—Ü–∏—è "–ù–∞–∑–∞–¥" –ø–æ –º–µ–Ω—é</li>
          </ul>
        </div>
        
        <div class="info">
          <p><strong>ü§ñ Telegram:</strong> <a href="https://t.me/rozysk_avto_bot">@rozysk_avto_bot</a></p>
          <p><strong>üìé –§–æ—Ä–º–∞—Ç—ã:</strong> CSV, Excel (xlsx, xls)</p>
          <p><strong>üïê –û–Ω–ª–∞–π–Ω:</strong> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</p>
        </div>
      </div>
    </body>
    </html>
  `);
});

app.get('/doget', (req, res) => {
  res.json({ 
    status: 'ok', 
    version: '6.0',
    message: 'Rozysk Avto Bot v6.0 with smart filtering',
    webhook: WEBHOOK_URL,
    timestamp: new Date().toISOString(),
    features: [
      'Regional filtering (Moscow + Moscow region)',
      'Address type filtering with multi-select',
      'Car type filtering (old/new)',
      'Interactive checkboxes',
      'Filter reselection capability',
      'Back navigation'
    ]
  });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await bot.deleteWebHook();
    console.log('Webhook —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', error);
  }
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await bot.deleteWebHook();
    console.log('Webhook —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', error);
  }
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, async () => {
  console.log(`üöÄ Server v6.0 running on port ${port}`);
  console.log(`üì° Webhook URL: ${WEBHOOK_URL}`);
  console.log(`üéØ Features: Regional + Type filtering, Multi-select UI`);
  
  await setupWebhook();
  
  console.log('‚úÖ Telegram bot v6.0 with smart filtering is ready!');
});
