const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const XLSX = require('xlsx');

const app = express();
const port = process.env.PORT || 10000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const APPS_SCRIPT_URL = process.env.APPS_SCRIPT_URL;
const WEBHOOK_URL = process.env.WEBHOOK_URL || `https://rozysk-avto-bot.onrender.com/webhook/${BOT_TOKEN}`;

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó polling –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const bot = new TelegramBot(BOT_TOKEN, { 
  polling: false,
  request: {
    agentOptions: {
      keepAlive: true,
      family: 4
    }
  }
});

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
const STATES = {
  WAITING_FILE: 'waiting_file',
  ASKING_FILTERS: 'asking_filters',
  SELECTING_ADDRESS_TYPES: 'selecting_address_types',
  SELECTING_CAR_TYPES: 'selecting_car_types',
  FILES_SENT: 'files_sent'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserState(chatId) {
  userStates.set(chatId, {
    state: STATES.WAITING_FILE,
    csvContent: null,
    fileName: null,
    availableAddressTypes: [],
    availableCarTypes: [],
    selectedAddressTypes: new Set(),
    selectedCarTypes: new Set(),
    processedData: null
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function getUserState(chatId) {
  if (!userStates.has(chatId)) {
    initUserState(chatId);
  }
  return userStates.get(chatId);
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
async function setupWebhook() {
  try {
    await bot.setWebHook(WEBHOOK_URL);
    console.log('‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', WEBHOOK_URL);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
  }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
function getFileType(filename) {
  const ext = filename.toLowerCase().split('.').pop();
  return ext;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
function isSupportedFile(filename) {
  const supportedTypes = ['csv', 'xlsx', 'xls'];
  const fileType = getFileType(filename);
  return supportedTypes.includes(fileType);
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Excel –≤ CSV –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
function convertExcelToCSV(buffer, fileName) {
  try {
    console.log('Converting Excel to CSV on server...');
    
    const workbook = XLSX.read(buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const csvContent = XLSX.utils.sheet_to_csv(worksheet);
    
    console.log('Excel converted to CSV successfully, length:', csvContent.length);
    return csvContent;
    
  } catch (error) {
    console.error('Error converting Excel to CSV:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Excel —Ñ–∞–π–ª: ' + error.message);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ CSV
function getUniqueValues(csvContent, columnName) {
  try {
    const lines = csvContent.split('\n');
    const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
    const columnIndex = headers.findIndex(h => h.toLowerCase().includes(columnName.toLowerCase()));
    
    if (columnIndex === -1) return [];
    
    const uniqueValues = new Set();
    for (let i = 1; i < lines.length; i++) {
      const cells = lines[i].split(',');
      if (cells[columnIndex]) {
        const value = cells[columnIndex].trim().replace(/"/g, '');
        if (value) uniqueValues.add(value);
      }
    }
    
    return Array.from(uniqueValues).slice(0, 20); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  } catch (error) {
    console.error('Error getting unique values:', error);
    return [];
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ CSV –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Apps Script
async function processCSVInAppsScript(csvContent, fileName, filters = null) {
  try {
    console.log(`Sending CSV to Apps Script: ${fileName}, length: ${csvContent.length}`);
    
    const base64Content = Buffer.from(csvContent, 'utf8').toString('base64');
    
    const requestData = {
      action: 'process_csv',
      csvContent: base64Content,
      fileName: fileName
    };
    
    if (filters) {
      requestData.filters = filters;
    }
    
    const response = await axios.post(APPS_SCRIPT_URL, requestData, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 300000
    });

    console.log('Apps Script response received');
    return response.data;
  } catch (error) {
    console.error('Error processing CSV in Apps Script:', error);
    throw new Error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ Google Apps Script. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function createFilterKeyboard(options, selected, backButton = true) {
  const keyboard = [];
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥—É
  for (let i = 0; i < options.length; i += 2) {
    const row = [];
    
    const option1 = options[i];
    const isSelected1 = selected.has(option1);
    row.push({
      text: `${isSelected1 ? '‚úÖ' : '‚òê'} ${option1}`,
      callback_data: `toggle_${i}`
    });
    
    if (i + 1 < options.length) {
      const option2 = options[i + 1];
      const isSelected2 = selected.has(option2);
      row.push({
        text: `${isSelected2 ? '‚úÖ' : '‚òê'} ${option2}`,
        callback_data: `toggle_${i + 1}`
      });
    }
    
    keyboard.push(row);
  }
  
  // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const controlRow = [];
  if (backButton) {
    controlRow.push({ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' });
  }
  controlRow.push({ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: 'next' });
  
  if (controlRow.length > 0) {
    keyboard.push(controlRow);
  }
  
  return { inline_keyboard: keyboard };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º MIME —Ç–∏–ø–æ–º
async function sendDocumentSafe(chatId, buffer, filename) {
  try {
    console.log(`Sending document: ${filename}, size: ${buffer.length} bytes`);
    
    await bot.sendDocument(chatId, buffer, {
      caption: `üìÑ ${filename}`
    }, {
      filename: filename,
      contentType: 'text/csv'
    });
    
    console.log('Document sent successfully');
    
  } catch (error) {
    console.error('Error sending document:', error);
    throw error;
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(chatId) {
  initUserState(chatId);
  
  const welcomeMessage = `
üöó **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rozysk Avto Bot v6.0!**

üÜï **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (—Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å)
‚Ä¢ –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∞–≤—Ç–æ
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞

‚úÖ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
‚Ä¢ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2000 —Å—Ç—Ä–æ–∫
‚Ä¢ –ì–µ–æ–ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è –∫–∞—Ä—Ç

üìé **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ CSV (.csv)
‚Ä¢ Excel (.xlsx, .xls)

üì§ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!**
  `;
  
  await bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function handleDocument(chatId, document) {
  const userState = getUserState(chatId);
  const fileName = document.file_name;
  const fileSize = document.file_size;

  console.log(`Processing document: ${fileName}, size: ${fileSize} bytes`);

  try {
    if (!isSupportedFile(fileName)) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: CSV, Excel (.xlsx, .xls)');
      return;
    }

    const processingMsg = await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...');

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    const fileInfo = await bot.getFile(document.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;

    await bot.editMessageText('üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...', {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });

    const response = await axios.get(fileUrl, { 
      responseType: 'arraybuffer',
      timeout: 60000
    });

    const fileBuffer = Buffer.from(response.data);
    const fileType = getFileType(fileName);
    let csvContent;

    if (fileType === 'csv') {
      csvContent = fileBuffer.toString('utf8');
    } else {
      await bot.editMessageText('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é Excel –≤ CSV...', {
        chat_id: chatId,
        message_id: processingMsg.message_id
      });
      
      csvContent = convertExcelToCSV(fileBuffer, fileName);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    userState.csvContent = csvContent;
    userState.fileName = fileName;

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    await bot.editMessageText('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...', {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });

    userState.availableAddressTypes = getUniqueValues(csvContent, '—Ç–∏–ø –∞–¥—Ä–µ—Å–∞');
    userState.availableCarTypes = getUniqueValues(csvContent, '—Ñ–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ');

    await bot.deleteMessage(chatId, processingMsg.message_id);

    // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
    userState.state = STATES.ASKING_FILTERS;
    await askForFilters(chatId);

  } catch (error) {
    console.error('Error processing document:', error);
    await bot.sendMessage(chatId, `‚ùå ${error.message}`);
  }
}

// –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function askForFilters(chatId) {
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üéØ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'apply_filters' },
        { text: 'üìÅ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤', callback_data: 'no_filters' }
      ]
    ]
  };

  await bot.sendMessage(chatId, 
    'ü§î **–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º?**\n\n' +
    'üéØ **–° —Ñ–∏–ª—å—Ç—Ä–∞–º–∏:** —Ç–æ–ª—å–∫–æ –ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å, –≤—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤ –∏ –∞–≤—Ç–æ\n' +
    'üìÅ **–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤:** –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å', 
    { 
      parse_mode: 'Markdown',
      reply_markup: keyboard
    }
  );
}

// –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤
async function selectAddressTypes(chatId) {
  const userState = getUserState(chatId);
  userState.state = STATES.SELECTING_ADDRESS_TYPES;

  if (userState.availableAddressTypes.length === 0) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü "—Ç–∏–ø –∞–¥—Ä–µ—Å–∞". –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.');
    await selectCarTypes(chatId);
    return;
  }

  const keyboard = createFilterKeyboard(
    userState.availableAddressTypes, 
    userState.selectedAddressTypes,
    true
  );

  await bot.sendMessage(chatId,
    'üè† **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n' +
    '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞.',
    {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    }
  );
}

// –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ
async function selectCarTypes(chatId) {
  const userState = getUserState(chatId);
  userState.state = STATES.SELECTING_CAR_TYPES;

  if (userState.availableCarTypes.length === 0) {
    await bot.sendMessage(chatId, '‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –∞–≤—Ç–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.');
    await processWithFilters(chatId);
    return;
  }

  const keyboard = createFilterKeyboard(
    userState.availableCarTypes, 
    userState.selectedCarTypes,
    true
  );

  await bot.sendMessage(chatId,
    'üöó **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–≤—Ç–æ (—Å—Ç–∞—Ä–æ–µ/–Ω–æ–≤–æ–µ):**\n\n' +
    '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞.',
    {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
async function processWithFilters(chatId) {
  const userState = getUserState(chatId);
  
  const processingMsg = await bot.sendMessage(chatId, 'üîÑ –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–ª—å—Ç—Ä—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...');

  try {
    const filters = {
      regionFilter: true, // –í—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
      addressTypes: Array.from(userState.selectedAddressTypes),
      carTypes: Array.from(userState.selectedCarTypes)
    };

    const result = await processCSVInAppsScript(userState.csvContent, userState.fileName, filters);

    if (result.success) {
      await bot.deleteMessage(chatId, processingMsg.message_id);
      await sendProcessedFiles(chatId, result, true);
    } else {
      await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}`, {
        chat_id: chatId,
        message_id: processingMsg.message_id
      });
    }

  } catch (error) {
    console.error('Error processing with filters:', error);
    await bot.editMessageText(`‚ùå ${error.message}`, {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function processWithoutFilters(chatId) {
  const userState = getUserState(chatId);
  
  const processingMsg = await bot.sendMessage(chatId, '‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');

  try {
    const result = await processCSVInAppsScript(userState.csvContent, userState.fileName);

    if (result.success) {
      await bot.deleteMessage(chatId, processingMsg.message_id);
      await sendProcessedFiles(chatId, result, false);
    } else {
      await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}`, {
        chat_id: chatId,
        message_id: processingMsg.message_id
      });
    }

  } catch (error) {
    console.error('Error processing without filters:', error);
    await bot.editMessageText(`‚ùå ${error.message}`, {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
async function sendProcessedFiles(chatId, result, withFilters) {
  const userState = getUserState(chatId);
  userState.state = STATES.FILES_SENT;

  const filterInfo = withFilters ? 
    `\nüéØ **–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã:**\n` +
    `‚Ä¢ –†–µ–≥–∏–æ–Ω: –ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å\n` +
    `‚Ä¢ –¢–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤: ${userState.selectedAddressTypes.size > 0 ? Array.from(userState.selectedAddressTypes).join(', ') : '–≤—Å–µ'}\n` +
    `‚Ä¢ –¢–∏–ø—ã –∞–≤—Ç–æ: ${userState.selectedCarTypes.size > 0 ? Array.from(userState.selectedCarTypes).join(', ') : '–≤—Å–µ'}` :
    '\nüìÅ **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤**';

  const resultMessage = `
‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${result.totalRows}
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–µ–π: ${result.partsCount}${filterInfo}

üìÅ **–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã...**
  `;

  await bot.sendMessage(chatId, resultMessage, { parse_mode: 'Markdown' });

  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
  const instructionMessage = `
üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google My Maps (mymaps.google.com)
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
4. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
5. –ê–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω—É—Ç —Ç–æ—á–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ

üéØ **–ö–∞–∂–¥—ã–π —Ñ–∞–π–ª: –¥–æ 2000 –∑–∞–ø–∏—Å–µ–π**
  `;

  await bot.sendMessage(chatId, instructionMessage, { parse_mode: 'Markdown' });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
  for (let i = 0; i < result.files.length; i++) {
    const file = result.files[i];
    const buffer = Buffer.from(file.content, 'base64');
    
    await sendDocumentSafe(chatId, buffer, file.name);

    if (i < result.files.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1500));
    }
  }

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üîÑ –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'reselect_filters' },
        { text: 'üìé –ù–æ–≤—ã–π —Ñ–∞–π–ª', callback_data: 'new_file' }
      ]
    ]
  };

  await bot.sendMessage(chatId, 
    'üéâ **–í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
    { 
      parse_mode: 'Markdown',
      reply_markup: keyboard 
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;
  const userState = getUserState(chatId);

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    if (data === 'apply_filters') {
      await selectAddressTypes(chatId);
    }
    else if (data === 'no_filters') {
      await processWithoutFilters(chatId);
    }
    else if (data === 'back') {
      if (userState.state === STATES.SELECTING_ADDRESS_TYPES) {
        await askForFilters(chatId);
      } else if (userState.state === STATES.SELECTING_CAR_TYPES) {
        await selectAddressTypes(chatId);
      }
    }
    else if (data === 'next') {
      if (userState.state === STATES.SELECTING_ADDRESS_TYPES) {
        await selectCarTypes(chatId);
      } else if (userState.state === STATES.SELECTING_CAR_TYPES) {
        await processWithFilters(chatId);
      }
    }
    else if (data.startsWith('toggle_')) {
      const index = parseInt(data.split('_')[1]);
      
      if (userState.state === STATES.SELECTING_ADDRESS_TYPES) {
        const option = userState.availableAddressTypes[index];
        if (userState.selectedAddressTypes.has(option)) {
          userState.selectedAddressTypes.delete(option);
        } else {
          userState.selectedAddressTypes.add(option);
        }
        
        const keyboard = createFilterKeyboard(
          userState.availableAddressTypes, 
          userState.selectedAddressTypes,
          true
        );
        
        await bot.editMessageReplyMarkup(keyboard, {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id
        });
      }
      else if (userState.state === STATES.SELECTING_CAR_TYPES) {
        const option = userState.availableCarTypes[index];
        if (userState.selectedCarTypes.has(option)) {
          userState.selectedCarTypes.delete(option);
        } else {
          userState.selectedCarTypes.add(option);
        }
        
        const keyboard = createFilterKeyboard(
          userState.availableCarTypes, 
          userState.selectedCarTypes,
          true
        );
        
        await bot.editMessageReplyMarkup(keyboard, {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id
        });
      }
    }
    else if (data === 'reselect_filters') {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä—ã –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
      userState.selectedAddressTypes.clear();
      userState.selectedCarTypes.clear();
      await askForFilters(chatId);
    }
    else if (data === 'new_file') {
      initUserState(chatId);
      await bot.sendMessage(chatId, 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
    }

  } catch (error) {
    console.error('Error handling callback query:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(chatId, text) {
  if (text && !text.startsWith('/')) {
    await bot.sendMessage(chatId, 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (CSV –∏–ª–∏ Excel)');
  }
}

// Webhook endpoint
app.post(`/webhook/${BOT_TOKEN}`, async (req, res) => {
  try {
    const update = req.body;
    
    if (update.message) {
      const chatId = update.message.chat.id;
      const message = update.message;

      console.log('Received message from chat:', chatId);

      if (message.text === '/start') {
        await handleStart(chatId);
      }
      else if (message.document) {
        await handleDocument(chatId, message.document);
      }
      else if (message.text) {
        await handleMessage(chatId, message.text);
      }
    }
    else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }

    res.status(200).send('OK');
  } catch (error) {
    console.error('Webhook error:', error);
    res.status(200).send('OK');
  }
});

// –û—Å–Ω–æ–≤–Ω—ã–µ routes
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>Rozysk Avto Bot v6.0</title>
      <style>
        body { font-family: Arial, sans-serif; margin: 50px; text-align: center; background: #f0f0f0; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .status { color: #4CAF50; font-size: 24px; font-weight: bold; }
        .info { color: #666; margin-top: 20px; line-height: 1.6; }
        .version { background: #e3f2fd; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .features { background: #f3e5f5; padding: 15px; border-radius: 5px; margin: 10px 0; text-align: left; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üöó Rozysk Avto Bot</h1>
        <div class="status">‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!</div>
        <div class="version">
          <strong>–í–µ—Ä—Å–∏—è 6.0 - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–ò–õ–¨–¢–†–´</strong><br>
          ‚Ä¢ –ü–æ–ª–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö<br>
          ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤<br>
          ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        </div>
        <div class="features">
          <strong>üéØ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</strong><br>
          ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–ú–æ—Å–∫–≤–∞ + –æ–±–ª–∞—Å—Ç—å)<br>
          ‚Ä¢ –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤<br>
          ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∞–≤—Ç–æ<br>
          ‚Ä¢ –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏ "–ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å"<br>
          ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ checkbox'—ã
        </div>
        <div class="info">
          <p><strong>Telegram:</strong> <a href="https://t.me/rozysk_avto_bot">@rozysk_avto_bot</a></p>
          <p><strong>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</strong> CSV, Excel (xlsx, xls)</p>
          <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</p>
        </div>
      </div>
    </body>
    </html>
  `);
});

app.get('/doget', (req, res) => {
  res.json({ 
    status: 'ok', 
    message: 'Rozysk Avto Bot v6.0 - Interactive Filters',
    webhook: WEBHOOK_URL,
    timestamp: new Date().toISOString(),
    features: [
      'Regional filtering (Moscow + region)',
      'Interactive address type selection',
      'Car type filtering',
      'Filter reselection capability',
      'Back navigation buttons'
    ]
  });
});

app.post('/dopost', (req, res) => {
  res.json({ 
    status: 'ok', 
    received: req.body,
    timestamp: new Date().toISOString()
  });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await bot.deleteWebHook();
    console.log('Webhook —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', error);
  }
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...');
  try {
    await bot.deleteWebHook();
    console.log('Webhook —É–¥–∞–ª–µ–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:', error);
  }
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, async () => {
  console.log(`üöÄ Server v6.0 running on port ${port}`);
  console.log(`üì° Webhook URL: ${WEBHOOK_URL}`);
  console.log(`üéØ Features: Interactive Filters + Regional Filtering`);
  
  await setupWebhook();
  
  console.log('‚úÖ Telegram bot v6.0 with Interactive Filters is ready!');
});
