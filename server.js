const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const multer = require('multer');
const axios = require('axios');
const fs = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;

// Telegram Bot Token –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const APPS_SCRIPT_URL = process.env.APPS_SCRIPT_URL;

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const upload = multer({ dest: 'uploads/' });

// Middleware
app.use(express.json());

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–æ–∑—ã—Å–∫–∞ –∞–≤—Ç–æ!

üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (.xlsx, .xls, .csv) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.

‚ÑπÔ∏è –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –û—á–∏—Å—Ç–∏—Ç –∞–¥—Ä–µ—Å–∞
‚Ä¢ –ò–∑–≤–ª–µ—á–µ—Ç –Ω–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏
‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2000 —Å—Ç—Ä–æ–∫
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç —Ñ–∞–π–ª—ã –¥–ª—è Google My Maps

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ñ–∞–π–ª!
  `;
  
  bot.sendMessage(chatId, welcomeMessage);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.on('document', async (msg) => {
  const chatId = msg.chat.id;
  const document = msg.document;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    const allowedExtensions = ['.xlsx', '.xls', '.csv'];
    const fileExtension = document.file_name.slice(document.file_name.lastIndexOf('.')).toLowerCase();
    
    if (!allowedExtensions.includes(fileExtension)) {
      bot.sendMessage(chatId, '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: .xlsx, .xls, .csv');
      return;
    }
    
    bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...');
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const fileLink = await bot.getFileLink(document.file_id);
    const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
    const fileBuffer = Buffer.from(response.data);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const fileBase64 = fileBuffer.toString('base64');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Apps Script
    const appsScriptResponse = await axios.post(APPS_SCRIPT_URL, {
      action: 'process_file',
      fileData: fileBase64,
      filename: document.file_name,
      userId: chatId
    }, {
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 300000 // 5 –º–∏–Ω—É—Ç
    });
    
    const result = appsScriptResponse.data;
    
    if (!result.success) {
      throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    bot.sendMessage(chatId, `
‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!

üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${result.totalRows}
üìÅ –ß–∞—Å—Ç–µ–π: ${result.chunks}

üì• –ó–∞–≥—Ä—É–∂–∞—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...
    `);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–∞–∫ CSV —Ñ–∞–π–ª
    for (let i = 0; i < result.data.length; i++) {
      const chunk = result.data[i];
      const csvContent = convertToCSV(chunk);
      
      const filename = `${i + 1}_—á–∞—Å—Ç—å_—Ä–æ–∑—ã—Å–∫–∞_–∞–≤—Ç–æ.csv`;
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const tempFilePath = `uploads/${filename}`;
      fs.writeFileSync(tempFilePath, csvContent, 'utf8');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      await bot.sendDocument(chatId, tempFilePath, {
        caption: `üìÅ –ß–∞—Å—Ç—å ${i + 1} –∏–∑ ${result.chunks}`
      });
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.unlinkSync(tempFilePath);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    bot.sendMessage(chatId, `
üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!

üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ maps.google.com
2. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É"
3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
4. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü —Å –∞–¥—Ä–µ—Å–∞–º–∏ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

‚ú® –ì–æ—Ç–æ–≤–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç–µ.
    `);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ CSV
function convertToCSV(data) {
  return data.map(row => 
    row.map(cell => {
      const cellStr = String(cell || '');
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ
      if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
        return `"${cellStr.replace(/"/g, '""')}"`;
      }
      return cellStr;
    }).join(',')
  ).join('\n');
}

// Health check endpoint
app.get('/', (req, res) => {
  res.json({ status: 'Bot is running', timestamp: new Date().toISOString() });
});

// Webhook endpoint (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
app.post('/webhook', (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
