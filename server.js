const express = require('express');
const multer = require('multer');
const xlsx = require('xlsx');
const csv = require('csv-parser');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;
const fs = require('fs');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
const PORT = process.env.PORT || 3000;
const BOT_TOKEN = process.env.BOT_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

if (!BOT_TOKEN) {
  console.error('BOT_TOKEN environment variable is required');
  process.exit(1);
}

const bot = new TelegramBot(BOT_TOKEN);
app.use(express.json());

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync('uploads')) {
  fs.mkdirSync('uploads');
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
const userFiles = new Map();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const upload = multer({ dest: 'uploads/' });

// –ú–æ—Å–∫–æ–≤—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –∏ –±–ª–∏–∑–ª–µ–∂–∞—â–∏–µ –æ–±–ª–∞—Å—Ç–∏
const MOSCOW_REGIONS = [
  '–º–æ—Å–∫–≤–∞', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ø–æ–¥–º–æ—Å–∫–æ–≤—å–µ', '–∫–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
  '—Ç—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '—Ä—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–≤–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
  '—Å–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '—Ç–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '—è—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
];

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const STATES = {
  WAITING_FILE: 'waiting_file',
  CHOOSE_FILTERS: 'choose_filters',
  SELECT_ADDRESS_TYPE: 'select_address_type',
  SELECT_NEW_CAR_FLAG: 'select_new_car_flag',
  FILTERS_APPLIED: 'filters_applied'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserState(chatId) {
  if (!userStates.has(chatId)) {
    userStates.set(chatId, {
      state: STATES.WAITING_FILE,
      selectedAddressTypes: new Set(),
      selectedNewCarFlags: new Set(),
      originalData: null,
      filteredData: null,
      addressTypes: [],
      newCarFlags: []
    });
  }
  return userStates.get(chatId);
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function cleanupUserFiles(chatId) {
  if (userFiles.has(chatId)) {
    const files = userFiles.get(chatId);
    files.forEach(file => {
      try {
        if (fs.existsSync(file)) {
          fs.unlinkSync(file);
        }
      } catch (error) {
        console.error('Error deleting file:', error);
      }
    });
    userFiles.delete(chatId);
  }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º —Ä–µ–≥–∏–æ–Ω–∞–º
function filterMoscowRegions(data) {
  return data.filter(row => {
    const region = String(row['–†–µ–≥–∏–æ–Ω'] || row['—Ä–µ–≥–∏–æ–Ω'] || row['–†–ï–ì–ò–û–ù'] || '').toLowerCase();
    const city = String(row['–ì–æ—Ä–æ–¥'] || row['–≥–æ—Ä–æ–¥'] || row['–ì–û–†–û–î'] || '').toLowerCase();
    const address = String(row['–ê–¥—Ä–µ—Å'] || row['–∞–¥—Ä–µ—Å'] || row['–ê–î–†–ï–°'] || '').toLowerCase();
    
    const fullLocation = `${region} ${city} ${address}`.toLowerCase();
    
    return MOSCOW_REGIONS.some(moscowRegion => 
      fullLocation.includes(moscowRegion) || 
      region.includes(moscowRegion) ||
      city.includes('–º–æ—Å–∫–≤–∞') ||
      address.includes('–º–æ—Å–∫–≤–∞')
    );
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç–æ–ª–±—Ü–∞
function getUniqueValues(data, columnName) {
  const possibleColumns = [columnName, columnName.toLowerCase(), columnName.toUpperCase()];
  
  for (const col of possibleColumns) {
    if (data.length > 0 && data[0].hasOwnProperty(col)) {
      return [...new Set(data.map(row => row[col]).filter(val => val !== undefined && val !== null && val !== ''))];
    }
  }
  return [];
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
function createSelectionKeyboard(options, selectedItems, backButton = true) {
  const keyboard = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
  for (let i = 0; i < options.length; i += 2) {
    const row = [];
    
    const option1 = options[i];
    const isSelected1 = selectedItems.has(option1);
    row.push({
      text: `${isSelected1 ? '‚úÖ' : '‚óªÔ∏è'} ${option1}`,
      callback_data: `toggle_${Buffer.from(option1).toString('base64')}`
    });
    
    if (i + 1 < options.length) {
      const option2 = options[i + 1];
      const isSelected2 = selectedItems.has(option2);
      row.push({
        text: `${isSelected2 ? '‚úÖ' : '‚óªÔ∏è'} ${option2}`,
        callback_data: `toggle_${Buffer.from(option2).toString('base64')}`
      });
    }
    
    keyboard.push(row);
  }
  
  // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const controlRow = [];
  if (selectedItems.size > 0) {
    controlRow.push({ text: '‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å', callback_data: 'apply_selection' });
  }
  if (backButton) {
    controlRow.push({ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back' });
  }
  
  if (controlRow.length > 0) {
    keyboard.push(controlRow);
  }
  
  return { inline_keyboard: keyboard };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–æ–≤
async function parseCSV(filePath) {
  return new Promise((resolve, reject) => {
    const results = [];
    fs.createReadStream(filePath)
      .pipe(csv())
      .on('data', (data) => results.push(data))
      .on('end', () => resolve(results))
      .on('error', reject);
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–æ–≤
function parseExcel(filePath) {
  const workbook = xlsx.readFile(filePath);
  const sheetName = workbook.SheetNames[0];
  const worksheet = workbook.Sheets[sheetName];
  return xlsx.utils.sheet_to_json(worksheet);
}

// –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
async function createCSVFile(data, filename) {
  if (data.length === 0) return null;
  
  const headers = Object.keys(data[0]).map(key => ({ id: key, title: key }));
  const csvWriter = createCsvWriter({
    path: filename,
    header: headers,
    encoding: 'utf8'
  });
  
  await csvWriter.writeRecords(data);
  return filename;
}

// –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø–∞–º –∞–¥—Ä–µ—Å–æ–≤
function splitDataByAddressTypes(data, selectedTypes) {
  const result = {};
  
  selectedTypes.forEach(type => {
    result[type] = data.filter(row => {
      const addressType = row['–¢–∏–ø –∞–¥—Ä–µ—Å–∞'] || row['—Ç–∏–ø –∞–¥—Ä–µ—Å–∞'] || row['–¢–ò–ü –ê–î–†–ï–°–ê'] || '';
      return addressType === type;
    });
  });
  
  return result;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  initUserState(chatId);
  
  try {
    await bot.sendMessage(chatId, 
      'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.\n\n' +
      'üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ:\n' +
      '‚Ä¢ –û—Å—Ç–∞–≤–ª—é —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ –ú–æ—Å–∫–≤–µ –∏ –ü–æ–¥–º–æ—Å–∫–æ–≤—å—é\n' +
      '‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n' +
      '‚Ä¢ –†–∞–∑–¥–µ–ª—é —Ñ–∞–π–ª –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º'
    );
  } catch (error) {
    console.error('Error sending start message:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.on('document', async (msg) => {
  const chatId = msg.chat.id;
  const userState = initUserState(chatId);
  
  try {
    await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...');
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const fileId = msg.document.file_id;
    const fileInfo = await bot.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;
    
    const response = await fetch(fileUrl);
    const buffer = await response.arrayBuffer();
    
    const tempPath = path.join('uploads', `${chatId}_${Date.now()}_${msg.document.file_name}`);
    fs.writeFileSync(tempPath, Buffer.from(buffer));
    
    // –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
    let data;
    const fileName = msg.document.file_name.toLowerCase();
    
    if (fileName.endsWith('.csv')) {
      data = await parseCSV(tempPath);
    } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {
      data = parseExcel(tempPath);
    } else {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏ Excel —Ñ–∞–π–ª—ã');
      fs.unlinkSync(tempPath);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º —Ä–µ–≥–∏–æ–Ω–∞–º
    const moscowData = filterMoscowRegions(data);
    
    if (moscowData.length === 0) {
      await bot.sendMessage(chatId, '‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ú–æ—Å–∫–≤–µ –∏ –ü–æ–¥–º–æ—Å–∫–æ–≤—å—é');
      fs.unlinkSync(tempPath);
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userState.originalData = moscowData;
    userState.addressTypes = getUniqueValues(moscowData, '–¢–∏–ø –∞–¥—Ä–µ—Å–∞');
    userState.newCarFlags = getUniqueValues(moscowData, '–§–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ');
    
    await bot.sendMessage(chatId, 
      `‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
      `üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø–æ –ú–æ—Å–∫–≤–µ/–ü–æ–¥–º–æ—Å–∫–æ–≤—å—é: ${moscowData.length}\n` +
      `üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–¥—Ä–µ—Å–æ–≤: ${userState.addressTypes.length}\n` +
      `üöó –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –∞–≤—Ç–æ: ${userState.newCarFlags.length}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤', callback_data: 'no_filters' },
              { text: 'üéØ –° —Ñ–∏–ª—å—Ç—Ä–∞–º–∏', callback_data: 'with_filters' }
            ]
          ]
        }
      }
    );
    
    userState.state = STATES.CHOOSE_FILTERS;
    fs.unlinkSync(tempPath);
    
  } catch (error) {
    console.error('Error processing file:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const userState = userStates.get(chatId);
  
  if (!userState) {
    await bot.answerCallbackQuery(query.id, { text: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start' });
    return;
  }
  
  try {
    if (data === 'no_filters') {
      await handleNoFilters(chatId, userState);
      
    } else if (data === 'with_filters') {
      await handleWithFilters(chatId, userState);
      
    } else if (data === 'back') {
      await handleBack(chatId, userState);
      
    } else if (data.startsWith('toggle_')) {
      const option = Buffer.from(data.replace('toggle_', ''), 'base64').toString();
      await handleToggle(chatId, userState, option, query);
      
    } else if (data === 'apply_selection') {
      await handleApplySelection(chatId, userState);
      
    } else if (data === 'reselect_filters') {
      userState.selectedAddressTypes.clear();
      userState.selectedNewCarFlags.clear();
      await handleWithFilters(chatId, userState);
      
    } else if (data === 'restart') {
      cleanupUserFiles(chatId);
      userStates.delete(chatId);
      initUserState(chatId);
      await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    await bot.answerCallbackQuery(query.id);
    
  } catch (error) {
    console.error('Error handling callback:', error);
    await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function handleNoFilters(chatId, userState) {
  try {
    const filename = `uploads/processed_${chatId}_${Date.now()}.csv`;
    await createCSVFile(userState.originalData, filename);
    
    await bot.sendDocument(chatId, filename, {
      caption: `üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤\nüìä –ó–∞–ø–∏—Å–µ–π: ${userState.originalData.length}`
    });
    
    if (!userFiles.has(chatId)) {
      userFiles.set(chatId, []);
    }
    userFiles.get(chatId).push(filename);
    
    await bot.sendMessage(chatId, 
      '–•–æ—Ç–∏—Ç–µ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏?',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üéØ –î–∞, —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏', callback_data: 'with_filters' },
              { text: 'üÜï –ù–æ–≤—ã–π —Ñ–∞–π–ª', callback_data: 'restart' }
            ]
          ]
        }
      }
    );
    
  } catch (error) {
    console.error('Error creating file without filters:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
async function handleWithFilters(chatId, userState) {
  userState.state = STATES.SELECT_ADDRESS_TYPE;
  
  const keyboard = createSelectionKeyboard(
    userState.addressTypes, 
    userState.selectedAddressTypes,
    true
  );
  
  await bot.sendMessage(chatId, 
    'üè† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤:\n\n' +
    `–î–æ—Å—Ç—É–ø–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${userState.addressTypes.length}`,
    { reply_markup: keyboard }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async function handleBack(chatId, userState) {
  if (userState.state === STATES.SELECT_ADDRESS_TYPE) {
    userState.state = STATES.CHOOSE_FILTERS;
    await bot.sendMessage(chatId, 
      '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤', callback_data: 'no_filters' },
              { text: 'üéØ –° —Ñ–∏–ª—å—Ç—Ä–∞–º–∏', callback_data: 'with_filters' }
            ]
          ]
        }
      }
    );
  } else if (userState.state === STATES.SELECT_NEW_CAR_FLAG) {
    await handleWithFilters(chatId, userState);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ–ø—Ü–∏–π
async function handleToggle(chatId, userState, option, query) {
  if (userState.state === STATES.SELECT_ADDRESS_TYPE) {
    if (userState.selectedAddressTypes.has(option)) {
      userState.selectedAddressTypes.delete(option);
    } else {
      userState.selectedAddressTypes.add(option);
    }
    
    const keyboard = createSelectionKeyboard(
      userState.addressTypes, 
      userState.selectedAddressTypes,
      true
    );
    
    try {
      await bot.editMessageReplyMarkup(keyboard, {
        chat_id: chatId,
        message_id: query.message.message_id
      });
    } catch (error) {
      console.error('Error editing message:', error);
    }
    
  } else if (userState.state === STATES.SELECT_NEW_CAR_FLAG) {
    if (userState.selectedNewCarFlags.has(option)) {
      userState.selectedNewCarFlags.delete(option);
    } else {
      userState.selectedNewCarFlags.add(option);
    }
    
    const keyboard = createSelectionKeyboard(
      userState.newCarFlags, 
      userState.selectedNewCarFlags,
      true
    );
    
    try {
      await bot.editMessageReplyMarkup(keyboard, {
        chat_id: chatId,
        message_id: query.message.message_id
      });
    } catch (error) {
      console.error('Error editing message:', error);
    }
  }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
async function handleApplySelection(chatId, userState) {
  if (userState.state === STATES.SELECT_ADDRESS_TYPE && userState.selectedAddressTypes.size > 0) {
    userState.state = STATES.SELECT_NEW_CAR_FLAG;
    
    const keyboard = createSelectionKeyboard(
      userState.newCarFlags, 
      userState.selectedNewCarFlags,
      true
    );
    
    await bot.sendMessage(chatId, 
      'üöó –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥–∏ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ:\n\n' +
      `–î–æ—Å—Ç—É–ø–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${userState.newCarFlags.length}`,
      { reply_markup: keyboard }
    );
    
  } else if (userState.state === STATES.SELECT_NEW_CAR_FLAG && userState.selectedNewCarFlags.size > 0) {
    await applyFiltersAndCreateFiles(chatId, userState);
  }
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
async function applyFiltersAndCreateFiles(chatId, userState) {
  try {
    await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...');
    
    let filteredData = [...userState.originalData];
    
    if (userState.selectedAddressTypes.size > 0) {
      filteredData = filteredData.filter(row => {
        const addressType = row['–¢–∏–ø –∞–¥—Ä–µ—Å–∞'] || row['—Ç–∏–ø –∞–¥—Ä–µ—Å–∞'] || row['–¢–ò–ü –ê–î–†–ï–°–ê'] || '';
        return userState.selectedAddressTypes.has(addressType);
      });
    }
    
    if (userState.selectedNewCarFlags.size > 0) {
      filteredData = filteredData.filter(row => {
        const carFlag = row['–§–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ'] || row['—Ñ–ª–∞–≥ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ'] || row['–§–õ–ê–ì –ù–û–í–û–ì–û –ê–í–¢–û'] || '';
        return userState.selectedNewCarFlags.has(carFlag);
      });
    }
    
    if (filteredData.length === 0) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    const splitData = splitDataByAddressTypes(filteredData, userState.selectedAddressTypes);
    const createdFiles = [];
    
    for (const [addressType, data] of Object.entries(splitData)) {
      if (data.length > 0) {
        const safeName = addressType.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9]/g, '_');
        const filename = `uploads/${safeName}_${chatId}_${Date.now()}.csv`;
        await createCSVFile(data, filename);
        createdFiles.push({ filename, addressType, count: data.length });
      }
    }
    
    for (const file of createdFiles) {
      await bot.sendDocument(chatId, file.filename, {
        caption: `üìÅ ${file.addressType}\nüìä –ó–∞–ø–∏—Å–µ–π: ${file.count}`
      });
    }
    
    if (!userFiles.has(chatId)) {
      userFiles.set(chatId, []);
    }
    userFiles.get(chatId).push(...createdFiles.map(f => f.filename));
    
    await bot.sendMessage(chatId, 
      `‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${createdFiles.length}\n\n` +
      `–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n` +
      `üè† –¢–∏–ø—ã –∞–¥—Ä–µ—Å–æ–≤: ${Array.from(userState.selectedAddressTypes).join(', ')}\n` +
      `üöó –§–ª–∞–≥–∏ –∞–≤—Ç–æ: ${Array.from(userState.selectedNewCarFlags).join(', ')}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'reselect_filters' },
              { text: 'üÜï –ù–æ–≤—ã–π —Ñ–∞–π–ª', callback_data: 'restart' }
            ]
          ]
        }
      }
    );
    
    userState.state = STATES.FILTERS_APPLIED;
    
  } catch (error) {
    console.error('Error creating filtered files:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏');
  }
}

// Webhook endpoint
app.post('/webhook', async (req, res) => {
  try {
    await bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error('Webhook error:', error);
    res.sendStatus(500);
  }
});

// Health check
app.get('/', (req, res) => {
  res.send('Bot is running!');
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async function setWebhook() {
  try {
    if (WEBHOOK_URL) {
      await bot.setWebHook(`${WEBHOOK_URL}/webhook`);
      console.log('Webhook set successfully');
    } else {
      console.log('WEBHOOK_URL not set, using polling');
      bot.startPolling();
    }
  } catch (error) {
    console.error('Error setting webhook:', error);
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
process.on('SIGTERM', () => {
  userFiles.forEach((files, chatId) => {
    cleanupUserFiles(chatId);
  });
});

process.on('SIGINT', () => {
  userFiles.forEach((files, chatId) => {
    cleanupUserFiles(chatId);
  });
  process.exit(0);
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  setWebhook();
});
