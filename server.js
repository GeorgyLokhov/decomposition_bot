const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const multer = require('multer');
const axios = require('axios');
const FormData = require('form-data');

const app = express();
const port = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN; // –î–æ–±–∞–≤–∏–º –≤ —Å–µ–∫—Ä–µ—Ç—ã Render
const APPS_SCRIPT_URL = process.env.APPS_SCRIPT_URL; // URL –∏–∑ Apps Script

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
function getFileType(filename) {
  const ext = filename.toLowerCase().split('.').pop();
  return ext;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
function isSupportedFile(filename) {
  const supportedTypes = ['csv', 'xlsx', 'xls'];
  const fileType = getFileType(filename);
  return supportedTypes.includes(fileType);
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
async function fileToBase64(fileUrl, filename) {
  try {
    const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
    const base64 = Buffer.from(response.data).toString('base64');
    return base64;
  } catch (error) {
    console.error('Error converting file to base64:', error);
    throw error;
  }
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Apps Script
async function processFileInAppsScript(fileContent, fileName, fileType) {
  try {
    const response = await axios.post(APPS_SCRIPT_URL, {
      action: 'process_file',
      fileContent: fileContent,
      fileName: fileName,
      fileType: fileType
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    return response.data;
  } catch (error) {
    console.error('Error processing file in Apps Script:', error);
    throw error;
  }
}

// –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ webhook
bot.deleteWebhook().then(() => {
  console.log('Webhook cleared successfully');
}).catch((err) => {
  console.log('Webhook clear error:', err.message);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  
  const welcomeMessage = `
üöó **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Rozysk Avto Bot!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Ä–æ–∑—ã—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:

‚úÖ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –û—á–∏—â–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ò–∑–≤–ª–µ–∫–∞—Ç—å –Ω–æ–º–µ—Ä–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ
‚Ä¢ –†–∞–∑–¥–µ–ª—è—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2000 —Å—Ç—Ä–æ–∫
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –≥–µ–æ–ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è –∫–∞—Ä—Ç

üìé **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ CSV (.csv)
‚Ä¢ Excel (.xlsx, .xls)

üì§ **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!**
  `;
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.on('document', async (msg) => {
  const chatId = msg.chat.id;
  const document = msg.document;
  const fileName = document.file_name;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if (!isSupportedFile(fileName)) {
      bot.sendMessage(chatId, '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã: CSV, Excel (.xlsx, .xls)');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processingMsg = await bot.sendMessage(chatId, '‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...');

    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    const fileInfo = await bot.getFile(document.file_id);
    const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    const fileContent = await fileToBase64(fileUrl, fileName);
    const fileType = getFileType(fileName);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ Apps Script
    bot.editMessageText('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞–∫–µ...', {
      chat_id: chatId,
      message_id: processingMsg.message_id
    });

    const result = await processFileInAppsScript(fileContent, fileName, fileType);

    if (result.success) {
      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
      bot.deleteMessage(chatId, processingMsg.message_id);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      const resultMessage = `
‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${result.totalRows}
‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–µ–π: ${result.partsCount}

üìÅ **–ü–æ–ª—É—á–∞—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...**
      `;

      await bot.sendMessage(chatId, resultMessage, { parse_mode: 'Markdown' });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
      const instructionMessage = `
üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Google My Maps (mymaps.google.com)
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
4. –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
5. –ê–¥—Ä–µ—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è –≤ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ

üéØ **–ö–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ 2000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏**
      `;

      await bot.sendMessage(chatId, instructionMessage, { parse_mode: 'Markdown' });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
      for (let i = 0; i < result.files.length; i++) {
        const file = result.files[i];
        const buffer = Buffer.from(file.content, 'base64');
        
        await bot.sendDocument(chatId, buffer, {
          filename: file.name
        });

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        if (i < result.files.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      await bot.sendMessage(chatId, 'üéâ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –≤ Google My Maps.');

    } else {
      bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.error}`, {
        chat_id: chatId,
        message_id: processingMsg.message_id
      });
    }

  } catch (error) {
    console.error('Error processing document:', error);
    bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  
  if (msg.text && !msg.text.startsWith('/')) {
    bot.sendMessage(chatId, 'üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (CSV –∏–ª–∏ Excel)');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
  console.error('Telegram bot error:', error);
});

// Express routes
app.get('/', (req, res) => {
  res.send('Rozysk Avto Bot is running!');
});

app.get('/doget', (req, res) => {
  res.json({ status: 'ok', message: 'Rozysk Avto Bot server is running' });
});

app.post('/dopost', (req, res) => {
  res.json({ status: 'ok', received: req.body });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
  console.log('Telegram bot is polling...');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('Shutting down bot...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('Shutting down bot...');
  bot.stopPolling();  
  process.exit(0);
});

