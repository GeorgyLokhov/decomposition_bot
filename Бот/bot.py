import os
import json
import asyncio
import queue
import threading
import traceback
from datetime import datetime, timedelta
from flask import Flask, request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import google.generativeai as genai
from dotenv import load_dotenv
import assemblyai as aai

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_KEY = os.getenv("GEMINI_KEY")
ASSEMBLYAI_API_KEY = os.getenv("ASSEMBLYAI_API_KEY")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "https://rozysk-avto-bot.onrender.com") + "/webhook"

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π
print(f"üîç TELEGRAM_TOKEN: {'OK' if TELEGRAM_TOKEN else 'MISSING'}")
print(f"üîç GEMINI_KEY: {'OK (' + str(len(GEMINI_KEY)) + ' chars)' if GEMINI_KEY else 'MISSING'}")
print(f"üîç ASSEMBLYAI_API_KEY: {'OK' if ASSEMBLYAI_API_KEY else 'MISSING'}")
print(f"üîç WEBHOOK_URL: {WEBHOOK_URL}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_KEY)
model = genai.GenerativeModel('gemini-2.0-flash-lite')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AssemblyAI
if ASSEMBLYAI_API_KEY:
    aai.settings.api_key = ASSEMBLYAI_API_KEY

app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á —Å –∏—Å—Ç–æ—Ä–∏–µ–π
user_tasks = {}
user_history = {}
update_queue = queue.Queue()
application = None
bot_loop = None
timer_tasks = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
def load_prompt(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞ prompts/"""
    try:
        prompt_path = os.path.join(os.path.dirname(__file__), 'prompts', filename)
        with open(prompt_path, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Prompt file not found: {filename}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üì• /start command from user {update.effective_user.id}")
    await update.message.reply_text(
        "–ë—ã–≤–∞–µ—Ç, –±–æ–ª—å—à–∞—è –∑–∞–¥–∞—á–∞ —Å—Ç–∞–≤–∏—Ç –≤ —Ç—É–ø–∏–∫, –∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å. –•–æ—á–µ—Ç—Å—è –æ—Ç–ª–æ–∂–∏—Ç—å –µ—ë –Ω–∞ –ø–æ—Ç–æ–º, –Ω–æ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ–±—Ä–µ—Å—Ç–∏ —è—Å–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å\n\n"
        "–ù–∞–ø–∏—à–∏ –∏–ª–∏ —Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º, –∫–∞–∫–∞—è —É —Ç–µ–±—è –∑–∞–¥–∞—á–∞, –∏ —è —Ä–∞–∑–æ–±—å—é –µ—ë –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ, –∫–æ—Ä–æ—Ç–∫–∏–µ —ç—Ç–∞–ø—ã —Å —Ç–∞–π–º–µ—Ä–æ–º\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é¬ª –∏–ª–∏ ¬´—É–±—Ä–∞—Ç—å—Å—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ¬ª"
    )

async def handle_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # Debug: –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print(f"üîç handle_task called from user {user_id}")
    print(f"üîç Message type - text: {update.message.text is not None}, voice: {update.message.voice is not None}, audio: {update.message.audio is not None}")

    task_text = update.message.text
    print(f"üì• Task received from user {user_id}: {task_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if context.user_data.get('waiting_for_feedback'):
        feedback_text = task_text.strip()
        print(f"üí¨ Feedback received from user {user_id}: {feedback_text}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        context.user_data['user_feedback'] = feedback_text
        context.user_data['waiting_for_feedback'] = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º
        status_msg = await update.message.reply_text("–ü—Ä–∏–Ω—è–ª, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–ø–∏—à–µ–º üîÑ")

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if user_id not in user_tasks:
            await status_msg.edit_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.")
            return

        task_name = user_tasks[user_id]['task_name']
        user_context = context.user_data.get('user_context', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è')

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —à–∞–≥–∞–º–∏
        step_messages = context.user_data.get('step_messages', [])
        for msg_id in step_messages:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
            except Exception as e:
                print(f"‚ö†Ô∏è Could not delete message {msg_id}: {e}")

        context.user_data['step_messages'] = []

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_msg.edit_text("‚è≥ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é —Å —É—á—ë—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏...")

        # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
        await decompose_task_with_context(
            update,
            task_name,
            user_context,
            user_id,
            message=status_msg,
            skip_status_message=True,
            feedback=feedback_text,
            context_obj=context
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if context.user_data.get('waiting_for_context'):
        user_context = task_text.strip()
        task_to_decompose = context.user_data.get('pending_task')

        print(f"üìù Context received from user {user_id}: {user_context}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        context.user_data['waiting_for_context'] = False
        context.user_data['pending_task'] = None

        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await decompose_task_with_context(update, task_to_decompose, user_context, user_id, context_obj=context)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞
    if context.user_data.get('editing_single_step') is not None and user_id in user_tasks:
        step_num = context.user_data['editing_single_step']

        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–≥–∞
        new_step = task_text.strip()

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–®–∞–≥", —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        if not new_step.startswith('–®–∞–≥'):
            new_step = f"–®–∞–≥ {step_num + 1} (5 –º–∏–Ω): {new_step}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
        user_tasks[user_id]['steps'][step_num] = new_step

        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="start_steps")]]
        await update.message.reply_text(
            f"‚úÖ –®–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n{new_step}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        context.user_data['editing_single_step'] = None
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
    if context.user_data.get('editing_steps') and user_id in user_tasks:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤
        steps = [line.strip() for line in task_text.split('\n') if line.strip().startswith('–®–∞–≥')]

        if steps:
            user_tasks[user_id]['steps'] = steps
            steps_list = '\n'.join(steps)
            keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_steps")]]
            await update.message.reply_text(
                f"‚úÖ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n{steps_list}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data['editing_steps'] = False
            return
        else:
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —à–∞–≥–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –®–∞–≥ 1 (5 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ")
            return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await update.message.reply_text("‚úçüèª –•–æ—á—É —É—Ç–æ—á–Ω–∏—Ç—å...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print(f"ü§ñ Generating context questions for task: {task_text[:50]}...")

    prompt_template = load_prompt('context_questions.txt')
    if not prompt_template:
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        questions_text = (
            "‚Ä¢ –ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –≤—Ä–µ–º–µ–Ω–∏?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
            "‚Ä¢ –¢–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?"
        )
    else:
        try:
            prompt = prompt_template.replace('{task}', task_text)
            response = model.generate_content(prompt)
            questions_text = response.text.strip()
            print(f"‚úÖ Generated personalized questions")
        except Exception as e:
            print(f"‚ö†Ô∏è Error generating questions: {e}, using fallback")
            questions_text = (
                "‚Ä¢ –ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?\n"
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –≤—Ä–µ–º–µ–Ω–∏?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
                "‚Ä¢ –¢–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?"
            )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π
    context.user_data['waiting_for_context'] = True
    context.user_data['pending_task'] = task_text

    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="skip_context")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
    ]
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    await status_msg.edit_text(
        f"üìã –ù—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏:\n\n"
        f"{questions_text}\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç¬ª, —Ç–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return

async def decompose_task_with_context(update: Update, task_text: str, user_context: str, user_id: int, message=None, skip_status_message=False, feedback=None, context_obj=None):
    """–î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–∑ update.message –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π message
    msg = message if message else update.message
    if not skip_status_message:
        await msg.reply_text("‚è≥ –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if context_obj:
        context_obj.user_data['user_context'] = user_context

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
    prompt_template = load_prompt('decompose_task.txt')
    if not prompt_template:
        await msg.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è AI")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    prompt = prompt_template.replace('{task}', task_text).replace('{context}', user_context)
    if feedback:
        prompt += f"\n\n–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:\n{feedback}\n\n–£—á—Ç–∏ —ç—Ç—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Å–æ–∑–¥–∞–π –°–û–í–ï–†–®–ï–ù–ù–û –ù–û–í–´–ô –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏."

    try:
        print(f"ü§ñ Sending request to Gemini API with context...")
        response = model.generate_content(prompt)
        print(f"‚úÖ Gemini API response received")

        steps_text = response.text
        print(f"üìù Response text: {steps_text[:200]}...")

        steps = [line.strip() for line in steps_text.split('\n') if line.strip().startswith('–®–∞–≥')]
        print(f"üìã Parsed {len(steps)} steps")

        if not steps:
            print(f"‚ö†Ô∏è No steps parsed from response")
            await msg.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —à–∞–≥–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.")
            return

        user_tasks[user_id] = {
            'steps': steps,
            'current': 0,
            'task_name': task_text,
            'started_at': None,
            'completed': False
        }

        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        step_messages = []

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for idx, step in enumerate(steps):
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data=f"rewrite_step_{idx}"),
                 InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_single_step_{idx}")]
            ]
            sent_msg = await msg.reply_text(
                step,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            step_messages.append(sent_msg.message_id)

        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö —à–∞–≥–æ–≤ - –∫–Ω–æ–ø–∫–∏ –ù–∞—á–∞—Ç—å, –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å—ë –∏ –û—Ç–º–µ–Ω–∏—Ç—å
        final_keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_steps")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å—ë", callback_data="rewrite_all")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
        ]
        final_msg = await msg.reply_text(
            f"üìã –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {len(steps)}",
            reply_markup=InlineKeyboardMarkup(final_keyboard)
        )
        step_messages.append(final_msg.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ context –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if context_obj:
            context_obj.user_data['step_messages'] = step_messages

        print(f"‚úÖ Steps sent to user {user_id}")

    except Exception as e:
        print(f"‚ùå ERROR in decompose_task_with_context: {type(e).__name__}: {str(e)}")
        traceback.print_exc()
        await msg.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {type(e).__name__}: {str(e)}")

async def edit_steps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    steps = user_tasks[user_id]['steps']
    steps_list = '\n'.join(steps)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å", callback_data="start_steps")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
    ]

    await query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–≥–æ–≤:\n\n{steps_list}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–®–∞–≥ 1 (5 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ\n"
        "–®–∞–≥ 2 (7 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å'",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    context.user_data['editing_steps'] = True

async def skip_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    task_text = context.user_data.get('pending_task')
    if not task_text:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    print(f"‚è≠ User {user_id} skipped context")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
    context.user_data['waiting_for_context'] = False
    context.user_data['pending_task'] = None

    # –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–µ–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    await query.edit_message_text("‚è≥ –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")
    await decompose_task_with_context(update, task_text, "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", user_id, message=query.message, skip_status_message=True, context_obj=context)

async def start_steps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    print(f"‚ñ∂Ô∏è User {user_id} started steps")

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    user_tasks[user_id]['started_at'] = datetime.now()
    context.user_data['editing_steps'] = False

    await send_current_step(query, user_id, context)

async def send_current_step(query, user_id, context):
    task_data = user_tasks[user_id]
    current = task_data['current']
    steps = task_data['steps']

    if current >= len(steps):
        print(f"üéâ User {user_id} completed all steps")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in user_history:
            user_history[user_id] = []

        task_data['completed'] = True
        task_data['completed_at'] = datetime.now()
        user_history[user_id].append(task_data.copy())

        keyboard = [
            [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]
        ]

        await query.edit_message_text(
            "üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        del user_tasks[user_id]
        return

    step = steps[current]
    minutes = 5

    if '–º–∏–Ω' in step:
        try:
            minutes = int(step.split('(')[1].split('–º–∏–Ω')[0].strip())
        except:
            pass

    print(f"üì§ Sending step {current + 1}/{len(steps)} to user {user_id}, timer: {minutes} min")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–≥–æ–º
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step"),
         InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_step")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_step"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
    ]

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    end_time = datetime.now() + timedelta(minutes=minutes)
    task_data['current_step_end_time'] = end_time

    await query.edit_message_text(
        f"–®–∞–≥ {current + 1}/{len(steps)}:\n\n{step}\n\n‚è± –û—Å—Ç–∞–ª–æ—Å—å: {minutes:02d}:00",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    timer_tasks[user_id] = asyncio.create_task(
        update_timer(query, user_id, minutes, current, context)
    )

async def update_timer(query, user_id, total_minutes, step_num, context):
    # –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    try:
        if user_id not in user_tasks:
            return

        task_data = user_tasks[user_id]
        end_time = task_data.get('current_step_end_time')

        if not end_time:
            return

        while True:
            await asyncio.sleep(1)

            if user_id not in user_tasks or user_tasks[user_id]['current'] != step_num:
                return

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            now = datetime.now()
            remaining_time = end_time - now

            if remaining_time.total_seconds() <= 0:
                # –í—Ä–µ–º—è –≤—ã—à–ª–æ
                task_data = user_tasks[user_id]
                steps = task_data['steps']

                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step"),
                     InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_step")],
                    [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_step"),
                     InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
                ]
                await query.message.reply_text(
                    "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ì–æ—Ç–æ–≤–æ?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return

            task_data = user_tasks[user_id]
            steps = task_data['steps']
            step = steps[step_num]

            remaining_seconds = int(remaining_time.total_seconds())
            mins = remaining_seconds // 60
            secs = remaining_seconds % 60

            keyboard = [
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step"),
                 InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_step")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_step"),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
            ]

            try:
                await query.message.edit_text(
                    f"–®–∞–≥ {step_num + 1}/{len(steps)}:\n\n{step}\n\n"
                    f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {mins:02d}:{secs:02d}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "message is not modified"
                if "message is not modified" not in str(e).lower():
                    print(f"‚ö†Ô∏è Could not update timer: {e}")

    except asyncio.CancelledError:
        print(f"‚è± Timer cancelled for user {user_id}")
    except Exception as e:
        print(f"‚ùå Error in timer: {e}")

async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    print(f"‚û°Ô∏è User {user_id} clicked next step")

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    user_tasks[user_id]['current'] += 1
    await send_current_step(query, user_id, context)

async def skip_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("‚è≠ –®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω")
    user_id = update.effective_user.id

    print(f"‚è≠ User {user_id} skipped step")

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    user_tasks[user_id]['current'] += 1
    await send_current_step(query, user_id, context)

async def prev_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id

    if user_id not in user_tasks:
        await query.answer()
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    task_data = user_tasks[user_id]
    current = task_data['current']

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –≤—Å–µ—Ö —à–∞–≥–æ–≤
    if current <= 0:
        await query.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —à–∞–≥–æ–≤")
        print(f"‚óÄÔ∏è User {user_id} returned to steps overview from first step")

        # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        if user_id in timer_tasks:
            timer_tasks[user_id].cancel()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        user_tasks[user_id]['current'] = 0
        user_tasks[user_id]['started_at'] = None

        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.message.delete()
        except Exception as e:
            print(f"‚ö†Ô∏è Could not delete message: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏ –∑–∞–Ω–æ–≤–æ
        steps = task_data['steps']
        step_messages = []

        for idx, step in enumerate(steps):
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data=f"rewrite_step_{idx}"),
                 InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_single_step_{idx}")]
            ]
            sent_msg = await context.bot.send_message(
                chat_id=user_id,
                text=step,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            step_messages.append(sent_msg.message_id)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        final_keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_steps")],
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å—ë", callback_data="rewrite_all")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
        ]
        final_msg = await context.bot.send_message(
            chat_id=user_id,
            text=f"üìã –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {len(steps)}",
            reply_markup=InlineKeyboardMarkup(final_keyboard)
        )
        step_messages.append(final_msg.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ context
        context.user_data['step_messages'] = step_messages
        return

    await query.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É")
    print(f"‚óÄÔ∏è User {user_id} went back to previous step")

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    user_tasks[user_id]['current'] -= 1
    await send_current_step(query, user_id, context)

async def cancel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    print(f"‚ùå User {user_id} cancelled task")

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()
        del timer_tasks[user_id]

    task_name = user_tasks[user_id]['task_name']
    del user_tasks[user_id]

    keyboard = [[InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]]

    await query.edit_message_text(
        f"‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞: {task_name}\n\n–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def rewrite_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –≤—Å—ë' - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    print(f"üîÑ User {user_id} requested full rewrite")

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
    rewrite_count = context.user_data.get('rewrite_all_count', 0)

    print(f"üìä Rewrite count: {rewrite_count}/2")

    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    if rewrite_count >= 2:
        print(f"‚ö†Ô∏è Rewrite limit reached, requesting feedback")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —à–∞–≥–∞–º–∏
        step_messages = context.user_data.get('step_messages', [])
        for msg_id in step_messages:
            try:
                await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
            except Exception as e:
                print(f"‚ö†Ô∏è Could not delete message {msg_id}: {e}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        context.user_data['rewrite_all_count'] = 0
        context.user_data['step_messages'] = []

        # –£–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await query.message.delete()
        except Exception as e:
            print(f"‚ö†Ô∏è Could not delete final message: {e}")

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        context.user_data['waiting_for_feedback'] = True
        await context.bot.send_message(
            chat_id=user_id,
            text="ü§î –†–∞—Å—Å–∫–∞–∂–∏, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç? –ß—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤ –≤—ã–¥–∞—á–µ?\n\n"
                 "–¢–≤–æ—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ª—É—á—à–µ"
        )
        return

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    context.user_data['rewrite_all_count'] = rewrite_count + 1
    print(f"üìà Rewrite count increased to {rewrite_count + 1}")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    task_text = user_tasks[user_id]['task_name']
    user_context = context.user_data.get('user_context', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è')

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –µ—Å–ª–∏ –µ—Å—Ç—å
    feedback = context.user_data.get('user_feedback', None)

    # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ —É–¥–∞–ª–µ–Ω–∏—è —à–∞–≥–æ–≤)
    await query.edit_message_text("‚è≥ –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º –ø–æ–¥—Ö–æ–¥–æ–º...")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —à–∞–≥–∞–º–∏
    step_messages = context.user_data.get('step_messages', [])
    for msg_id in step_messages:
        try:
            await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
        except Exception as e:
            print(f"‚ö†Ô∏è Could not delete message {msg_id}: {e}")

    context.user_data['step_messages'] = []

    # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    await decompose_task_with_context(
        update,
        task_text,
        user_context,
        user_id,
        message=query.message,
        skip_status_message=True,
        feedback=feedback,
        context_obj=context
    )

async def rewrite_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —à–∞–≥–∞ –∏–∑ callback_data
    step_num = int(query.data.split('_')[-1])

    print(f"üîÑ User {user_id} requested rewrite for step {step_num}")

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    task_data = user_tasks[user_id]
    steps = task_data['steps']

    if step_num >= len(steps):
        await query.edit_message_text("–®–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    current_step = steps[step_num]

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    await query.edit_message_text("‚è≥ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é —à–∞–≥...")

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        prompt_template = load_prompt('rewrite_step.txt')
        if not prompt_template:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è AI")
            return

        prompt = prompt_template.replace('{step}', current_step).replace('{step_number}', str(step_num + 1))

        response = model.generate_content(prompt)
        new_step = response.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–®–∞–≥"
        if not new_step.startswith('–®–∞–≥'):
            new_step = f"–®–∞–≥ {step_num + 1} (5 –º–∏–Ω): {new_step}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
        user_tasks[user_id]['steps'][step_num] = new_step

        print(f"‚úÖ Step rewritten for user {user_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º —à–∞–≥–∞ –∏ —Ç–µ–º–∏ –∂–µ –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data=f"rewrite_step_{step_num}"),
             InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_single_step_{step_num}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
        ]
        await query.edit_message_text(new_step, reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        print(f"‚ùå Error in rewrite_step: {e}")
        await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏: {str(e)}")

async def edit_single_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —à–∞–≥–∞ –∏–∑ callback_data
    step_num = int(query.data.split('_')[-1])

    print(f"‚úèÔ∏è User {user_id} requested edit for step {step_num}")

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    task_data = user_tasks[user_id]
    steps = task_data['steps']

    if step_num >= len(steps):
        await query.edit_message_text("–®–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    current_step = steps[step_num]

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
    if user_id in timer_tasks:
        timer_tasks[user_id].cancel()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥
    context.user_data['editing_single_step'] = step_num

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_step")]]

    await query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π —à–∞–≥:\n\n{current_step}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–®–∞–≥ X (Y –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def cancel_edit_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    print(f"‚ùå User {user_id} cancelled step edit")

    step_num = context.user_data.get('editing_single_step')
    context.user_data['editing_single_step'] = None

    if user_id not in user_tasks:
        keyboard = [[InlineKeyboardButton("üìù –û–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    if step_num is None:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —à–∞–≥–∞.")
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —à–∞–≥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    step_text = user_tasks[user_id]['steps'][step_num]
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data=f"rewrite_step_{step_num}"),
         InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_single_step_{step_num}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
    ]
    await query.edit_message_text(step_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if user_id not in user_history or not user_history[user_id]:
        await query.edit_message_text(
            "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]])
        )
        return

    history = user_history[user_id]
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"

    for i, task in enumerate(history[-5:], 1):
        task_name = task['task_name']
        steps_count = len(task['steps'])
        completed_at = task.get('completed_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        if isinstance(completed_at, datetime):
            completed_at = completed_at.strftime('%d.%m.%Y %H:%M')

        history_text += f"{i}. {task_name}\n   –®–∞–≥–æ–≤: {steps_count} | {completed_at}\n\n"

    keyboard = [[InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]]

    await query.edit_message_text(history_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —è —Ä–∞–∑–æ–±—å—é –µ—ë –Ω–∞ –∞–±—Å—É—Ä–¥–Ω–æ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –ø–æ 5-10 –º–∏–Ω—É—Ç."
    )

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_history or not user_history[user_id]:
        keyboard = [[InlineKeyboardButton("‚ûï –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="new_task")]]
        await update.message.reply_text(
            "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    history = user_history[user_id]
    history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:\n\n"

    for i, task in enumerate(history[-10:], 1):
        task_name = task['task_name']
        steps_count = len(task['steps'])
        completed_at = task.get('completed_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        if isinstance(completed_at, datetime):
            completed_at = completed_at.strftime('%d.%m.%Y %H:%M')

        history_text += f"{i}. {task_name}\n   –®–∞–≥–æ–≤: {steps_count} | {completed_at}\n\n"

    keyboard = [[InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")]]

    await update.message.reply_text(history_text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∏—Ö"""
    user_id = update.effective_user.id
    print(f"üé§ Voice message received from user {user_id}")

    if not ASSEMBLYAI_API_KEY:
        await update.message.reply_text("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
    status_msg = await update.message.reply_text("üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice = update.message.voice
        file = await context.bot.get_file(voice.file_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ –¥–∏—Å–∫
        voice_path = f"temp_voice_{user_id}_{voice.file_id}.oga"
        await file.download_to_drive(voice_path)

        print(f"üì• Voice file downloaded: {voice_path}")

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AssemblyAI
        transcriber = aai.Transcriber()
        config = aai.TranscriptionConfig(language_code="ru")  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫

        print(f"üîÑ Starting transcription...")
        transcript = transcriber.transcribe(voice_path, config=config)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(voice_path):
            os.remove(voice_path)

        if transcript.status == aai.TranscriptStatus.error:
            print(f"‚ùå Transcription error: {transcript.error}")
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ: {transcript.error}")
            return

        transcribed_text = transcript.text
        print(f"‚úÖ Transcription successful: {transcribed_text[:100]}...")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
        await status_msg.edit_text(
            f"‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n\"{transcribed_text}\"\n\n"
            f"–°–æ–±–∏—Ä–∞—é—Å—å —É—Ç–æ—á–Ω–∏—Ç—å..."
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        # handle_task_from_text —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, —ç—Ç–æ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        # –ü–µ—Ä–µ–¥–∞—ë–º status_msg –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await handle_task_from_text(update, context, transcribed_text, status_msg)

    except Exception as e:
        print(f"‚ùå Error in handle_voice: {type(e).__name__}: {str(e)}")
        traceback.print_exc()
        await status_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            if os.path.exists(voice_path):
                os.remove(voice_path)
        except:
            pass

async def handle_task_from_text(update: Update, context: ContextTypes.DEFAULT_TYPE, task_text: str, status_msg=None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≥–æ–ª–æ—Å–∞)"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç)
    if context.user_data.get('waiting_for_context'):
        user_context = task_text.strip()
        task_to_decompose = context.user_data.get('pending_task')

        print(f"üìù Context received from user {user_id} (voice): {user_context}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        context.user_data['waiting_for_context'] = False
        context.user_data['pending_task'] = None

        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        await decompose_task_with_context(update, task_to_decompose, user_context, user_id, context_obj=context)
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print(f"ü§ñ Generating context questions for task: {task_text[:50]}...")

    prompt_template = load_prompt('context_questions.txt')
    if not prompt_template:
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        questions_text = (
            "‚Ä¢ –ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?\n"
            "‚Ä¢ –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –≤—Ä–µ–º–µ–Ω–∏?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
            "‚Ä¢ –¢–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?"
        )
    else:
        try:
            prompt = prompt_template.replace('{task}', task_text)
            response = model.generate_content(prompt)
            questions_text = response.text.strip()
            print(f"‚úÖ Generated personalized questions")
        except Exception as e:
            print(f"‚ö†Ô∏è Error generating questions: {e}, using fallback")
            questions_text = (
                "‚Ä¢ –ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?\n"
                "‚Ä¢ –°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –≤—Ä–µ–º–µ–Ω–∏?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
                "‚Ä¢ –¢–≤–æ—ë —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?"
            )

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π
    context.user_data['waiting_for_context'] = True
    context.user_data['pending_task'] = task_text

    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="skip_context")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_task")]
    ]

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ status_msg (–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    if status_msg:
        await status_msg.edit_text(
            f"üìã –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:\n\n"
            f"{questions_text}\n\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            f"üìã –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏:\n\n"
            f"{questions_text}\n\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç' –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# Debug handler –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def debug_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    msg = update.message
    user_id = update.effective_user.id

    print(f"\nüîç DEBUG: Message received from user {user_id}")
    print(f"üîç Has text: {msg.text is not None}")
    print(f"üîç Has voice: {msg.voice is not None}")
    print(f"üîç Has audio: {msg.audio is not None}")
    print(f"üîç Has document: {msg.document is not None}")
    print(f"üîç Has photo: {msg.photo is not None if msg.photo else False}")
    print(f"üîç Content type: {msg.content_type if hasattr(msg, 'content_type') else 'unknown'}")

    if msg.text:
        print(f"üîç Text content: {msg.text[:50]}")
    if msg.voice:
        print(f"üîç Voice file_id: {msg.voice.file_id}")
        print(f"üîç Voice duration: {msg.voice.duration}s")
    print()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
async def setup_application():
    global application
    print("üîß Setting up Telegram application...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # DEBUG: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π handler –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≥—Ä—É–ø–ø–∞ -1 = –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º)
    application.add_handler(MessageHandler(filters.ALL, debug_handler), group=-1)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task))
    application.add_handler(CallbackQueryHandler(skip_context, pattern="^skip_context$"))
    application.add_handler(CallbackQueryHandler(start_steps, pattern="^start_steps$"))
    application.add_handler(CallbackQueryHandler(edit_steps, pattern="^edit_steps$"))
    application.add_handler(CallbackQueryHandler(next_step, pattern="^next_step$"))
    application.add_handler(CallbackQueryHandler(skip_step, pattern="^skip_step$"))
    application.add_handler(CallbackQueryHandler(prev_step, pattern="^prev_step$"))
    application.add_handler(CallbackQueryHandler(cancel_task, pattern="^cancel_task$"))
    application.add_handler(CallbackQueryHandler(rewrite_all, pattern="^rewrite_all$"))
    application.add_handler(CallbackQueryHandler(rewrite_step, pattern="^rewrite_step_"))
    application.add_handler(CallbackQueryHandler(edit_single_step, pattern="^edit_single_step_"))
    application.add_handler(CallbackQueryHandler(cancel_edit_step, pattern="^cancel_edit_step$"))
    application.add_handler(CallbackQueryHandler(show_history, pattern="^show_history$"))
    application.add_handler(CallbackQueryHandler(new_task, pattern="^new_task$"))

    await application.initialize()
    await application.start()
    print("‚úÖ Telegram application initialized")

async def setup_webhook():
    try:
        print("üîß Setting up webhook...")
        bot = Bot(token=TELEGRAM_TOKEN)
        await bot.initialize()
        result = await bot.set_webhook(url=WEBHOOK_URL)
        await bot.shutdown()
        print(f"‚úÖ Webhook set: {WEBHOOK_URL} -> {result}")
    except Exception as e:
        print(f"‚ùå Error setting webhook: {e}")
        traceback.print_exc()

async def process_updates():
    global application, update_queue
    print("üöÄ Starting update processor...")
    while True:
        try:
            try:
                update_data = update_queue.get(timeout=1)
            except queue.Empty:
                continue

            if update_data is None:
                break

            update = Update.de_json(update_data, application.bot)
            await application.process_update(update)
            print(f"‚úÖ Processed update: {update.update_id}")
        except Exception as e:
            print(f"‚ùå Error processing update: {e}")
            traceback.print_exc()

        await asyncio.sleep(0.01)

def run_bot_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    try:
        print("üîÑ Starting polling mode...")
        application_builder = Application.builder().token(TELEGRAM_TOKEN)
        application_instance = application_builder.build()

        # DEBUG: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π handler –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≥—Ä—É–ø–ø–∞ -1 = –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º)
        application_instance.add_handler(MessageHandler(filters.ALL, debug_handler), group=-1)

        application_instance.add_handler(CommandHandler("start", start))
        application_instance.add_handler(CommandHandler("history", history_command))
        application_instance.add_handler(MessageHandler(filters.VOICE, handle_voice))
        application_instance.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task))
        application_instance.add_handler(CallbackQueryHandler(skip_context, pattern="^skip_context$"))
        application_instance.add_handler(CallbackQueryHandler(start_steps, pattern="^start_steps$"))
        application_instance.add_handler(CallbackQueryHandler(edit_steps, pattern="^edit_steps$"))
        application_instance.add_handler(CallbackQueryHandler(next_step, pattern="^next_step$"))
        application_instance.add_handler(CallbackQueryHandler(skip_step, pattern="^skip_step$"))
        application_instance.add_handler(CallbackQueryHandler(prev_step, pattern="^prev_step$"))
        application_instance.add_handler(CallbackQueryHandler(cancel_task, pattern="^cancel_task$"))
        application_instance.add_handler(CallbackQueryHandler(rewrite_all, pattern="^rewrite_all$"))
        application_instance.add_handler(CallbackQueryHandler(rewrite_step, pattern="^rewrite_step_"))
        application_instance.add_handler(CallbackQueryHandler(edit_single_step, pattern="^edit_single_step_"))
        application_instance.add_handler(CallbackQueryHandler(cancel_edit_step, pattern="^cancel_edit_step$"))
        application_instance.add_handler(CallbackQueryHandler(show_history, pattern="^show_history$"))
        application_instance.add_handler(CallbackQueryHandler(new_task, pattern="^new_task$"))

        print("‚úÖ Bot handlers registered")
        print("üöÄ Bot is running in polling mode...")

        # –ó–∞–ø—É—Å–∫ polling
        application_instance.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        print(f"‚ùå Error in bot: {e}")
        traceback.print_exc()

def run_bot_webhook():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)"""
    global bot_loop
    try:
        bot_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(bot_loop)
        bot_loop.run_until_complete(setup_application())
        bot_loop.run_until_complete(setup_webhook())
        bot_loop.run_until_complete(process_updates())
    except Exception as e:
        print(f"‚ùå Error in bot thread: {e}")
        traceback.print_exc()
    finally:
        if bot_loop:
            bot_loop.close()

# Flask routes
@app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        if not json_data:
            return "No data", 400

        update_queue.put(json_data)
        print(f"üì® Update queued: {json_data.get('update_id', 'unknown')}")
        return "OK", 200
    except Exception as e:
        print(f"‚ùå Error in webhook: {e}")
        traceback.print_exc()
        return "Error", 500

@app.route('/health')
def health():
    return "OK", 200

if __name__ == '__main__':
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –µ—Å–ª–∏ RENDER_EXTERNAL_URL –ø—É—Å—Ç–æ–π - –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (polling)
    is_local = not WEBHOOK_URL or WEBHOOK_URL == "/webhook"

    if is_local:
        print("üöÄ Starting bot in LOCAL mode (polling)...")
        run_bot_polling()
    else:
        print("üöÄ Starting bot in PRODUCTION mode (webhook)...")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        bot_thread = threading.Thread(target=run_bot_webhook, daemon=True)
        bot_thread.start()

        import time
        time.sleep(3)

        # –ó–∞–ø—É—Å–∫ Flask
        port = int(os.environ.get('PORT', 10000))
        print(f"üåê Starting Flask server on port {port}")
        app.run(host='0.0.0.0', port=port, debug=False, threaded=True, use_reloader=False)
