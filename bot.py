import os
import json
import asyncio
import queue
import threading
from flask import Flask, request
from telegram import Update, Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
import google.generativeai as genai

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_KEY = os.getenv("GEMINI_KEY")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "https://rozysk-avto-bot.onrender.com") + "/webhook"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=GEMINI_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á
user_tasks = {}
update_queue = queue.Queue()
application = None
bot_loop = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á—É, —è —Ä–∞–∑–æ–±—å—é –µ—ë –Ω–∞ –∞–±—Å—É—Ä–¥–Ω–æ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –ø–æ 5-10 –º–∏–Ω—É—Ç.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø—Ä–æ AI' –∏–ª–∏ '—Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç—É'"
    )

async def handle_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = update.message.text
    
    await update.message.reply_text("‚è≥ –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")
    
    prompt = f"""–î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –Ω–∞ —à–∞–≥–∏. –ö–∞–∂–¥—ã–π —à–∞–≥ - –ê–ë–°–£–†–î–ù–û –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ 5-10 –º–∏–Ω—É—Ç.
–ü—Ä–∏–º–µ—Ä—ã —à–∞–≥–æ–≤: "–æ—Ç–∫—Ä–æ–π –Ω–æ—É—Ç–±—É–∫", "—Å–æ–∑–¥–∞–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª", "–Ω–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫".

–ó–∞–¥–∞—á–∞: {task_text}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ):
–®–∞–≥ 1 (5 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ
–®–∞–≥ 2 (7 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ
...

–ú–∞–∫—Å–∏–º—É–º 8 —à–∞–≥–æ–≤."""

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ Gemini
        response = model.generate_content(prompt)
        steps_text = response.text
        
        steps = [line.strip() for line in steps_text.split('\n') if line.strip().startswith('–®–∞–≥')]
        
        if not steps:
            await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —à–∞–≥–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.")
            return
        
        user_tasks[user_id] = {'steps': steps, 'current': 0, 'task_name': task_text}
        
        steps_list = '\n'.join(steps)
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_steps")]]
        
        await update.message.reply_text(
            f"üìã –ó–∞–¥–∞—á–∞: {task_text}\n\n{steps_list}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        print(f"Error in handle_task: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def start_steps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    if user_id not in user_tasks:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
        return
    
    await send_current_step(query, user_id, context)

async def send_current_step(query, user_id, context):
    task_data = user_tasks[user_id]
    current = task_data['current']
    steps = task_data['steps']
    
    if current >= len(steps):
        await query.edit_message_text("üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        del user_tasks[user_id]
        return
    
    step = steps[current]
    minutes = 5
    if '–º–∏–Ω' in step:
        try:
            minutes = int(step.split('(')[1].split('–º–∏–Ω')[0].strip())
        except:
            pass
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step")]]
    
    await query.edit_message_text(
        f"–®–∞–≥ {current + 1}/{len(steps)}:\n\n{step}\n\n‚è± –¢–∞–π–º–µ—Ä: {minutes} –º–∏–Ω—É—Ç",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    asyncio.create_task(send_timer_reminder(query, user_id, minutes, current))

async def send_timer_reminder(query, user_id, minutes, step_num):
    await asyncio.sleep(minutes * 60)
    
    if user_id in user_tasks and user_tasks[user_id]['current'] == step_num:
        keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step")]]
        try:
            await query.message.reply_text(
                "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ì–æ—Ç–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except:
            pass

async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    if user_id not in user_tasks:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    user_tasks[user_id]['current'] += 1
    await send_current_step(query, user_id, context)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
async def setup_application():
    global application
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task))
    application.add_handler(CallbackQueryHandler(start_steps, pattern="^start_steps$"))
    application.add_handler(CallbackQueryHandler(next_step, pattern="^next_step$"))
    
    await application.initialize()
    await application.start()
    print("‚úÖ Telegram application initialized")

async def setup_webhook():
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        await bot.initialize()
        result = await bot.set_webhook(url=WEBHOOK_URL)
        await bot.shutdown()
        print(f"‚úÖ Webhook set: {WEBHOOK_URL} -> {result}")
    except Exception as e:
        print(f"‚ùå Error setting webhook: {e}")

async def process_updates():
    global application, update_queue
    print("üöÄ Starting update processor...")
    
    while True:
        try:
            try:
                update_data = update_queue.get(timeout=1)
            except queue.Empty:
                continue
            
            if update_data is None:
                break
            
            update = Update.de_json(update_data, application.bot)
            await application.process_update(update)
            print(f"‚úÖ Processed update: {update.update_id}")
        except Exception as e:
            print(f"‚ùå Error processing update: {e}")
        
        await asyncio.sleep(0.01)

def run_bot():
    global bot_loop
    try:
        bot_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(bot_loop)
        
        bot_loop.run_until_complete(setup_application())
        bot_loop.run_until_complete(setup_webhook())
        bot_loop.run_until_complete(process_updates())
    except Exception as e:
        print(f"‚ùå Error in bot thread: {e}")
    finally:
        if bot_loop:
            bot_loop.close()

# Flask routes
@app.route('/')
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        if not json_data:
            return "No data", 400
        
        update_queue.put(json_data)
        print(f"üì® Update queued: {json_data.get('update_id', 'unknown')}")
        return "OK", 200
    except Exception as e:
        print(f"‚ùå Error in webhook: {e}")
        return "Error", 500

@app.route('/health')
def health():
    return "OK", 200

if __name__ == '__main__':
    print("üöÄ Starting bot with webhook...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    
    import time
    time.sleep(3)
    
    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get('PORT', 10000))
    print(f"üåê Starting Flask server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True, use_reloader=False)
