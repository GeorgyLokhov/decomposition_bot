import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import anthropic
import asyncio

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "–í–°–¢–ê–í–¨_–¢–û–ö–ï–ù_–ë–û–¢–ê"
ANTHROPIC_KEY = "–í–°–¢–ê–í–¨_–ö–õ–Æ–ß_CLAUDE"

client = anthropic.Anthropic(api_key=ANTHROPIC_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tasks = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á—É, —è —Ä–∞–∑–æ–±—å—é –µ—ë –Ω–∞ –∞–±—Å—É—Ä–¥–Ω–æ –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏ –ø–æ 5-10 –º–∏–Ω—É—Ç.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø—Ä–æ AI' –∏–ª–∏ '—Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—á—Ç—É'"
    )

async def handle_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task_text = update.message.text
    
    await update.message.reply_text("‚è≥ –î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...")
    
    # –ó–∞–ø—Ä–æ—Å –∫ Claude
    prompt = f"""–î–µ–∫–æ–º–ø–æ–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –Ω–∞ —à–∞–≥–∏. –ö–∞–∂–¥—ã–π —à–∞–≥ - –ê–ë–°–£–†–î–ù–û –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ 5-10 –º–∏–Ω—É—Ç.
–ü—Ä–∏–º–µ—Ä—ã —à–∞–≥–æ–≤: "–æ—Ç–∫—Ä–æ–π –Ω–æ—É—Ç–±—É–∫", "—Å–æ–∑–¥–∞–π –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª", "–Ω–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫".

–ó–∞–¥–∞—á–∞: {task_text}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ):
–®–∞–≥ 1 (5 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ
–®–∞–≥ 2 (7 –º–∏–Ω): –¥–µ–π—Å—Ç–≤–∏–µ
...

–ú–∞–∫—Å–∏–º—É–º 8 —à–∞–≥–æ–≤."""

    message = client.messages.create(
        model="claude-3-5-sonnet-20241022",
        max_tokens=1000,
        messages=[{"role": "user", "content": prompt}]
    )
    
    steps_text = message.content[0].text
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —à–∞–≥–æ–≤
    steps = []
    for line in steps_text.split('\n'):
        if line.strip().startswith('–®–∞–≥'):
            steps.append(line.strip())
    
    if not steps:
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —à–∞–≥–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    user_tasks[user_id] = {
        'steps': steps,
        'current': 0,
        'task_name': task_text
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–≥–∏
    steps_list = '\n'.join(steps)
    keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å", callback_data="start_steps")]]
    
    await update.message.reply_text(
        f"üìã –ó–∞–¥–∞—á–∞: {task_text}\n\n{steps_list}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_steps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    if user_id not in user_tasks:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é.")
        return
    
    await send_current_step(query, user_id, context)

async def send_current_step(query, user_id, context):
    task_data = user_tasks[user_id]
    current = task_data['current']
    steps = task_data['steps']
    
    if current >= len(steps):
        await query.edit_message_text("üéâ –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        del user_tasks[user_id]
        return
    
    step = steps[current]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    minutes = 5  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if '–º–∏–Ω' in step:
        try:
            minutes = int(step.split('(')[1].split('–º–∏–Ω')[0].strip())
        except:
            pass
    
    keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step")]]
    
    await query.edit_message_text(
        f"–®–∞–≥ {current + 1}/{len(steps)}:\n\n{step}\n\n‚è± –¢–∞–π–º–µ—Ä: {minutes} –º–∏–Ω—É—Ç",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –¢–∞–π–º–µ—Ä
    asyncio.create_task(send_timer_reminder(query, user_id, minutes, current))

async def send_timer_reminder(query, user_id, minutes, step_num):
    await asyncio.sleep(minutes * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å—ë –µ—â–µ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
    if user_id in user_tasks and user_tasks[user_id]['current'] == step_num:
        keyboard = [[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="next_step")]]
        try:
            await query.message.reply_text(
                "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ì–æ—Ç–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except:
            pass

async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    if user_id not in user_tasks:
        await query.edit_message_text("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    user_tasks[user_id]['current'] += 1
    await send_current_step(query, user_id, context)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_task))
    app.add_handler(CallbackQueryHandler(start_steps, pattern="^start_steps$"))
    app.add_handler(CallbackQueryHandler(next_step, pattern="^next_step$"))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
