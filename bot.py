import os
import re
import pandas as pd
from flask import Flask, request
import telebot
import threading

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = '7513294224:AAE9BN38NiITd2TmKNrslAprqzyDLWP5vuE'  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# === –ì–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ===
MOSCOW_REGION_CITIES = {
    "–ú–æ—Å–∫–≤–∞", "–º–æ—Å–∫–≤–∞", "–≥. –º–æ—Å–∫–≤–∞",
    "–ü–æ–¥–æ–ª—å—Å–∫", "–ë–∞–ª–∞—à–∏—Ö–∞", "–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫", "–•–∏–º–∫–∏", "–û–¥–∏–Ω—Ü–æ–≤–æ",
    "–õ—é–±–µ—Ä—Ü—ã", "–ú—ã—Ç–∏—â–∏", "–ö–æ–ª–æ–º–Ω–∞", "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", "–©–µ–ª–∫–æ–≤–æ",
    "–†–∞–º–µ–Ω—Å–∫–æ–µ", "–ñ—É–∫–æ–≤—Å–∫–∏–π", "–ü—É—à–∫–∏–Ω–æ", "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π",
    "–î–æ–º–æ–¥–µ–¥–æ–≤–æ", "–ò–≤–∞–Ω—Ç–µ–µ–≤–∫–∞", "–°–µ—Ä–≥–∏–µ–≤ –ü–æ—Å–∞–¥", "–§—Ä—è–∑–∏–Ω–æ",
    "–õ–æ–±–Ω—è", "–ö–ª–∏–Ω", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å–∫", "–†–æ—à–∞–ª—å", "–ö–∞—à–∏–Ω",
    "–ß–µ—Ö–æ–≤", "–î–º–∏—Ç—Ä–æ–≤", "–ù–æ–≥–∏–Ω—Å–∫", "–ü–∞–≤–ª–æ–≤—Å–∫–∏–π –ü–æ—Å–∞–¥", "–¢–∞–ª–¥–æ–º"
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
user_states = {}  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —à–∞–≥, –¥–∞–Ω–Ω—ã–µ, —Ñ–∏–ª—å—Ç—Ä—ã


# === –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ ===
def smart_clean_address(address):
    if pd.isna(address):
        return address
    address = str(address).strip()

    patterns_to_remove = [
        r',?\s*–∫–≤\.?\s*\d+', r',?\s*–∫–≤–∞—Ä—Ç–∏—Ä–∞\s*\d+',
        r',?\s*–æ—Ñ\.?\s*\d+', r',?\s*–æ—Ñ–∏—Å\s*\d+',
        r',?\s*—ç—Ç\.?\s*\d+', r',?\s*—ç—Ç–∞–∂\s*\d+',
        r',?\s*–ø–æ–º\.?\s*\d+', r',?\s*–ø–æ–º–µ—â–µ–Ω–∏–µ\s*\d+',
        r'^\d{6},?\s*'
    ]

    for pattern in patterns_to_remove:
        address = re.sub(pattern, '', address, flags=re.IGNORECASE)

    address = re.sub(r',+', ',', address)
    address = re.sub(r'\s+', ' ', address).strip(' ,')

    has_city = re.search(r'\b(–ú–æ—Å–∫–≤–∞|–º–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å|–º\.–æ\.)\b', address, re.IGNORECASE)
    if not has_city:
        is_mo = any(city.lower() in address.lower() for city in MOSCOW_REGION_CITIES)
        if is_mo:
            address += ', –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –†–æ—Å—Å–∏—è'
        else:
            address += ', –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'

    return address


# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ===
def extract_license_plate(text):
    if pd.isna(text) or not isinstance(text, str):
        return ""
    text_upper = text.upper()
    patterns = [
        r'[–ê-–Ø]\d{3}[–ê-–Ø]{2}\d{2,3}',
        r'\d{4}[–ê-–Ø]{2}\d{2,3}',
        r'[–ê-–Ø]{1,2}\d{3,4}[–ê-–Ø]{1,2}\d{2,3}'
    ]
    found_plates = []
    for pattern in patterns:
        found_plates.extend(re.findall(pattern, text_upper))
    return found_plates[0] if found_plates else ""


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ===
def process_file(df, filters=None):
    address_cols = [col for col in df.columns if any(word in col.lower() for word in ['–∞–¥—Ä–µ—Å', 'address'])]
    if address_cols:
        address_col = address_cols[0]
        df[address_col] = df[address_col].apply(smart_clean_address)

    auto_data_col = "–î–ê–ù–ù–´–ï –ê–í–¢–û"
    if auto_data_col in df.columns:
        license_plates = df[auto_data_col].apply(extract_license_plate)
        auto_data_index = df.columns.get_loc(auto_data_col)
        df.insert(auto_data_index + 1, "–ù–û–ú–ï–†–ù–û–ô –ó–ù–ê–ö", license_plates)

    # === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
    if filters:
        address_col = [col for col in df.columns if any(word in col.lower() for word in ['–∞–¥—Ä–µ—Å', 'address'])][0]
        if 'address_types' in filters:
            df = df[df[address_col].str.contains('|'.join(filters['address_types']), case=False, na=False)]
        if 'new_car_only' in filters and filters['new_car_only']:
            df = df[df["–î–ê–ù–ù–´–ï –ê–í–¢–û"].str.contains("–Ω–æ–≤—ã–π", case=False, na=False)]

    return df


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ===
@bot.message_handler(commands=['start'])
def start(message):
    user_states[message.chat.id] = {'step': 'upload'}
    bot.send_message(message.chat.id, "üì• –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ===
@bot.message_handler(content_types=['document'])
def handle_document(message):
    chat_id = message.chat.id
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    file_name = message.document.file_name
    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)

    try:
        if file_name.endswith('.csv'):
            df = pd.read_csv(file_name, encoding='utf-8')
        elif file_name.endswith(('.xlsx', '.xls')):
            df = pd.read_excel(file_name)
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            return
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    cleaned_df = process_file(df)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
    user_states[chat_id]['df'] = cleaned_df
    user_states[chat_id]['step'] = 'ask_filters'

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('‚úÖ –î–∞', '‚ùå –ù–µ—Ç')
    bot.send_message(chat_id, "‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã?", reply_markup=markup)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö ===
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'ask_filters')
def handle_filters_choice(message):
    chat_id = message.chat.id
    answer = message.text.strip()

    if answer == '‚úÖ –î–∞':
        user_states[chat_id]['step'] = 'choose_address_type'
        address_col = [col for col in user_states[chat_id]['df'].columns if any(word in col.lower() for word in ['–∞–¥—Ä–µ—Å', 'address'])][0]
        unique_addresses = user_states[chat_id]['df'][address_col].dropna().unique()

        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=False)
        for addr in sorted(set(unique_addresses))[:20]:  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            markup.add(addr.split(',')[0].strip())
        markup.add("‚úîÔ∏è –ì–æ—Ç–æ–≤–æ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

        bot.send_message(chat_id, "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø(—ã) –∞–¥—Ä–µ—Å–∞:", reply_markup=markup)
    elif answer == '‚ùå –ù–µ—Ç':
        export_and_send_files(chat_id, user_states[chat_id]['df'])
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")


# === –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–¥—Ä–µ—Å–∞ ===
@bot.message_handler(func=lambda msg: user_states.get(msg.chat_id, {}).get('step') == 'choose_address_type')
def handle_address_type(message):
    chat_id = message.chat.id
    choice = message.text.strip()

    if choice == "‚úîÔ∏è –ì–æ—Ç–æ–≤–æ":
        user_states[chat_id]['step'] = 'choose_new_car_flag'
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('‚úÖ –î–∞', '‚ùå –ù–µ—Ç')
        bot.send_message(chat_id, "‚ùì –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∞–≤—Ç–æ?", reply_markup=markup)
        return

    if choice == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        user_states[chat_id]['step'] = 'ask_filters'
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('‚úÖ –î–∞', '‚ùå –ù–µ—Ç')
        bot.send_message(chat_id, "‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã?", reply_markup=markup)
        return

    filters = user_states[chat_id].get('filters', {})
    address_types = filters.get('address_types', set())

    if choice in address_types:
        address_types.remove(choice)
    else:
        address_types.add(choice)

    filters['address_types'] = address_types
    user_states[chat_id]['filters'] = filters

    bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(address_types)}")


# === –§–ª–∞–≥ –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ ===
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'choose_new_car_flag')
def handle_new_car_flag(message):
    chat_id = message.chat.id
    choice = message.text.strip()

    filters = user_states[chat_id].get('filters', {})
    if choice == '‚úÖ –î–∞':
        filters['new_car_only'] = True
    elif choice == '‚ùå –ù–µ—Ç':
        filters['new_car_only'] = False

    user_states[chat_id]['filters'] = filters
    final_df = process_file(user_states[chat_id]['df'], filters)
    export_and_send_files(chat_id, final_df)


# === –≠–∫—Å–ø–æ—Ä—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ ===
def export_and_send_files(chat_id, df):
    chunk_size = 2000
    num_parts = (len(df) + chunk_size - 1) // chunk_size

    temp_dir = 'temp_exports'
    os.makedirs(temp_dir, exist_ok=True)

    part_files = []
    for i in range(0, len(df), chunk_size):
        part_num = (i // chunk_size) + 1
        part_df = df[i:i + chunk_size]
        filename = f"{temp_dir}/{part_num}_—á–∞—Å—Ç—å_—Ä–æ–∑—ã—Å–∫–∞_–∞–≤—Ç–æ.csv"
        part_df.to_csv(filename, index=False, encoding='utf-8-sig')
        part_files.append(filename)

    for file in part_files:
        with open(file, 'rb') as f:
            bot.send_document(chat_id, f)

    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add("üîÅ –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
    bot.send_message(chat_id, "‚úÖ –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã?", reply_markup=markup)
    user_states[chat_id]['step'] = 'restart'


# === –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ ===
@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id, {}).get('step') == 'restart')
def restart(message):
    chat_id = message.chat.id
    if message.text.strip() == "üîÅ –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã":
        user_states[chat_id]['step'] = 'ask_filters'
        user_states[chat_id]['filters'] = {}
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('‚úÖ –î–∞', '‚ùå –ù–µ—Ç')
        bot.send_message(chat_id, "‚ùì –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã?", reply_markup=markup)


# === Webhook handler ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200


# === –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ===
@app.route("/")
def index():
    return "Bot is running", 200


if __name__ == "__main__":
    thread = threading.Thread(target=bot.polling)
    thread.start()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
